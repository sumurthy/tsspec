{
  "kind": "package",
  "summary": [
    {
      "kind": "textDocElement",
      "value": "SharePoint Framework support for building client-side components"
    }
  ],
  "remarks": [
    {
      "kind": "textDocElement",
      "value": "This package supports development of client-side components (e.g. web parts, client-side extensions, and applications) built using the SharePoint Framework. It defines the base classes/interfaces that represent the functionality that is common across all client-side component types."
    }
  ],
  "exports": {
    "BaseComponent": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "Base class for client-side components such as BaseClientSideWebPart, BaseExtension, etc."
        }
      ],
      "remarks": [
        {
          "kind": "textDocElement",
          "value": "The constructor for this class is marked as internal; third party code should not inherit directly from this base class."
        }
      ],
      "isBeta": true,
      "members": {
        "context": {
          "kind": "property",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "BaseComponentContext",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "textDocElement",
              "value": "Use context object to access common services and state associated with the component."
            }
          ],
          "remarks": [
            {
              "kind": "textDocElement",
              "value": "Child classes are expected to override this field by redeclaring it with a specialized type. It is meant to be a read-only property; the type cannot be declared as read-only in the base class (because it is initialized outside the constructor), but child classes should redeclare it as readonly."
            }
          ],
          "isBeta": false
        },
        "onProvideServices": {
          "kind": "method",
          "signature": "@virtual protected onProvideServices(serviceScope: ServiceScope): void;",
          "accessModifier": "protected",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "textDocElement",
              "value": "Constructs the object that will be returned by the \"services\" property."
            }
          ],
          "remarks": [
            {
              "kind": "textDocElement",
              "value": "Child classes can expose additional services by extending the IExtensionServiceCollection interface, and then overriding consumeServices() function and the \"services\" property."
            }
          ],
          "isBeta": false
        }
      }
    },
    "BaseComponentContext": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "The base class for context objects for client-side components."
        }
      ],
      "remarks": [
        {
          "kind": "textDocElement",
          "value": "A \"context\" object is a collection of well-known services and other objects that are likely to be needed by any business logic working with the associated component. Each component type has its own specialized subclass ofClientSideComponentContext, e.g. WebPartContext for web parts, ExtensionContext for client-side extensions, etc. The constructor for this class is marked as internal; third party code should not inherit directly from this base class."
        }
      ],
      "isBeta": true,
      "members": {
        "getBaseManifest": {
          "kind": "method",
          "signature": "protected getBaseManifest(): IClientSideComponentManifest;",
          "accessModifier": "protected",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "IClientSideComponentManifest",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "textDocElement",
              "value": "The child class's overridden \"manifest\" property should call this method."
            }
          ],
          "remarks": [
            {
              "kind": "textDocElement",
              "value": "This is a workaround for a TypeScript/ES5 limitation, which prevents a subclass using \"super\" to access properties from the base class (even though functions work okay). It will be fixed in TypeScript/ES6."
            }
          ],
          "isBeta": false
        },
        "manifest": {
          "kind": "property",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "IClientSideComponentManifest",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "textDocElement",
              "value": "Manifest for the client side component."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "serviceScope": {
          "kind": "property",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "ServiceScope",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "textDocElement",
              "value": "Service scope instance that is scoped to this particular web part."
            }
          ],
          "remarks": [],
          "isBeta": false
        }
      }
    },
    "IClientSideComponentContext": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "textDocElement",
          "value": "The base context interface for client-side components."
        }
      ],
      "remarks": [
        {
          "kind": "textDocElement",
          "value": "A \"context\" object is a collection of well-known services and other objects that are likely to be needed by any business logic working with a component. Each component type has its own specialized extension of this interface, e.g. IWebPartContext for web parts, IExtensionContext for client-side extensions, etc."
        }
      ],
      "isBeta": false,
      "members": {
        "manifest": {
          "kind": "property",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IClientSideComponentManifest",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "textDocElement",
              "value": "Manifest for the client side component."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "serviceScope": {
          "kind": "property",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ServiceScope",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "textDocElement",
              "value": "Service scope instance that is scoped to this particular web part."
            }
          ],
          "remarks": [],
          "isBeta": false
        }
      }
    }
  }
}
