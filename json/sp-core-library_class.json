{
  "Environment": {
    "isBeta": false,
    "implementsExtendsName": "",
    "genericType": "",
    "descr": "This class contains contextual information about the enviroment that is hosting the framework and its components.",
    "remarks": null,
    "properties": {
      "type": {
        "descr": "An enum that describes which type of enviroment the framework is running in.",
        "remarks": null,
        "dataType": "EnvironmentType",
        "isOptional": false,
        "readonly": true,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      }
    },
    "functions": {},
    "methods": {},
    "constructor": {},
    "types": {},
    "variables": {},
    "modules": {},
    "objects": {}
  },
  "Guid": {
    "isBeta": false,
    "implementsExtendsName": "",
    "genericType": "",
    "descr": "This class represents a globally unique identifier, as described by IETF RFC 4122. The input string is normalized and validated, which provides important guarantees that simplify other code that works with the GUID. This class also provides basic support for generating a pseudo-random GUID; however, be aware that the uniqueness depends on the browser's Math.random() function and may be not be suitable for some applications.",
    "remarks": null,
    "properties": {
      "empty": {
        "descr": "Returns a new empty Guid instance.",
        "remarks": null,
        "dataType": "Guid",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      }
    },
    "functions": {},
    "methods": {
      "equals-guid": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "Compare this instance to another Guid instance",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public equals(guid: Guid): boolean;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "boolean",
        "returnDescr": "True if this instance and the specified Guid object represent the same value.",
        "params": [],
        "docName": "equals()",
        "mdLink": "equals"
      },
      "isValid-guid": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "Indicates whether a guid is valid, i.e. whether it would be successfully parsed by Guid.tryParse(). This function is cheaper than Guid.tryParse() because it does not construct a Guid object.",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public static isValid(guid: string | undefined | null): boolean;",
        "isStatic": true,
        "isOptional": false,
        "genericType": null,
        "returnType": "boolean",
        "returnDescr": "true, if the Guid is valid.",
        "params": [
          {
            "name": "guid",
            "descr": "The input string.",
            "isOptional": false,
            "dataType": "string | undefined | null"
          }
        ],
        "docName": "isValid(guid)",
        "mdLink": "isvalidguid"
      },
      "newGuid-guid": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "Returns a new Guid instance with a pseudo-randomly generated Guid, according to the version 4 UUID algorithm from RFC 4122.",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public static newGuid(randomNumberGenerator?: IRandomNumberGenerator): Guid;",
        "isStatic": true,
        "isOptional": false,
        "genericType": null,
        "returnType": "Guid",
        "returnDescr": "A new unique Guid object",
        "params": [],
        "docName": "newGuid()",
        "mdLink": "newguid"
      },
      "parse-guid": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "Parses the input string to construct a new Guid object. If the string cannot be parsed, then an error is thrown.",
        "remarks": "Example syntaxes accepted by this function: 'd5369f3b-bd7a-412a-9c0f-7f0650bb5489' '{d5369f3b-bd7a-412a-9c0f-7f0650bb5489}' '/Guid(d5369f3b-bd7a-412a-9c0f-7f0650bb5489)'",
        "accessModifier": "public",
        "signature": "public static parse(guidString: string | undefined | null): Guid;",
        "isStatic": true,
        "isOptional": false,
        "genericType": null,
        "returnType": "Guid",
        "returnDescr": "A valid Guid object",
        "params": [
          {
            "name": "guid",
            "descr": "The input string.",
            "dataType": null
          }
        ],
        "docName": "parse(guid)",
        "mdLink": "parseguid"
      },
      "toString-guid": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "Object.prototype.toString override",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public toString(): string;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "string",
        "returnDescr": "The GUID value in lowercase hexadecimal without braces. Example: 'd5369f3b-bd7a-412a-9c0f-7f0650bb5489'",
        "params": [],
        "docName": "toString()",
        "mdLink": "tostring"
      },
      "tryParse-guid": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "Attempts to parse the input string to construct a new Guid object. If the string cannot be parsed, then undefined is returned.",
        "remarks": "Example syntaxes accepted by this function: 'd5369f3b-bd7a-412a-9c0f-7f0650bb5489' '{d5369f3b-bd7a-412a-9c0f-7f0650bb5489}' '/Guid(d5369f3b-bd7a-412a-9c0f-7f0650bb5489)'",
        "accessModifier": "public",
        "signature": "public static tryParse(guid: string | undefined | null): Guid | undefined;",
        "isStatic": true,
        "isOptional": false,
        "genericType": null,
        "returnType": "Guid | undefined",
        "returnDescr": "The Guid object, or undefined if the string could not be parsed.",
        "params": [
          {
            "name": "guid",
            "descr": "The input string.",
            "isOptional": false,
            "dataType": "string | undefined | null"
          }
        ],
        "docName": "tryParse(guid)",
        "mdLink": "tryparseguid"
      }
    },
    "constructor": {},
    "types": {},
    "variables": {},
    "modules": {},
    "objects": {}
  },
  "Log": {
    "isBeta": false,
    "implementsExtendsName": "",
    "genericType": "",
    "descr": "The Log class provides static methods for logging messages at different levels (verbose, info, warning, error) and with context information. Context information helps identify which component generated the messages and makes the messages useful and filterable.",
    "remarks": null,
    "properties": {},
    "functions": {},
    "methods": {
      "error-log": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "Logs an error",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public static error(source: string, error: Error, scope?: ServiceScope): void;",
        "isStatic": true,
        "isOptional": false,
        "genericType": null,
        "returnType": "void",
        "returnDescr": "",
        "params": [
          {
            "name": "source",
            "descr": "the source from where the error is logged, e.g., the class name. The source provides context information for the logged error. If the source's length is more than 20, only the first 20 characters are kept.",
            "isOptional": false,
            "dataType": "string"
          },
          {
            "name": "error",
            "descr": "the error to be logged",
            "isOptional": false,
            "dataType": "Error"
          },
          {
            "name": "scope",
            "descr": "the service scope that the source uses. A service scope can provide more context information (e.g., web part information) to the logged error.",
            "isOptional": true,
            "dataType": "ServiceScope"
          }
        ],
        "docName": "error(source,error,scope)",
        "mdLink": "errorsourceerrorscope"
      },
      "info-log": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "Logs an informational message",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public static info(source: string, message: string, scope?: ServiceScope): void;",
        "isStatic": true,
        "isOptional": false,
        "genericType": null,
        "returnType": "void",
        "returnDescr": "",
        "params": [
          {
            "name": "source",
            "descr": "the source from where the message is logged, e.g., the class name. The source provides context information for the logged message. If the source's length is more than 20, only the first 20 characters are kept.",
            "isOptional": false,
            "dataType": "string"
          },
          {
            "name": "message",
            "descr": "the message to be logged If the message's length is more than 100, only the first 100 characters are kept.",
            "isOptional": false,
            "dataType": "string"
          },
          {
            "name": "scope",
            "descr": "the service scope that the source uses. A service scope can provide more context information (e.g., web part information) to the logged message.",
            "isOptional": true,
            "dataType": "ServiceScope"
          }
        ],
        "docName": "info(source,message,scope)",
        "mdLink": "infosourcemessagescope"
      },
      "verbose-log": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "Logs a verbose message",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public static verbose(source: string, message: string, scope?: ServiceScope): void;",
        "isStatic": true,
        "isOptional": false,
        "genericType": null,
        "returnType": "void",
        "returnDescr": "",
        "params": [
          {
            "name": "source",
            "descr": "the source from where the message is logged, e.g., the class name. The source provides context information for the logged message. If the source's length is more than 20, only the first 20 characters are kept.",
            "isOptional": false,
            "dataType": "string"
          },
          {
            "name": "message",
            "descr": "the message to be logged If the message's length is more than 100, only the first 100 characters are kept.",
            "isOptional": false,
            "dataType": "string"
          },
          {
            "name": "scope",
            "descr": "the service scope that the source uses. A service scope can provide more context information (e.g., web part information) to the logged message.",
            "isOptional": true,
            "dataType": "ServiceScope"
          }
        ],
        "docName": "verbose(source,message,scope)",
        "mdLink": "verbosesourcemessagescope"
      },
      "warn-log": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "Logs a warning",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public static warn(source: string, message: string, scope?: ServiceScope): void;",
        "isStatic": true,
        "isOptional": false,
        "genericType": null,
        "returnType": "void",
        "returnDescr": "",
        "params": [
          {
            "name": "source",
            "descr": "the source from where the message is logged, e.g., the class name. The source provides context information for the logged message. If the source's length is more than 20, only the first 20 characters are kept.",
            "isOptional": false,
            "dataType": "string"
          },
          {
            "name": "message",
            "descr": "the message to be logged If the message's length is more than 100, only the first 100 characters are kept.",
            "isOptional": false,
            "dataType": "string"
          },
          {
            "name": "scope",
            "descr": "the service scope that the source uses. A service scope can provide more context information (e.g., web part information) to the logged message.",
            "isOptional": true,
            "dataType": "ServiceScope"
          }
        ],
        "docName": "warn(source,message,scope)",
        "mdLink": "warnsourcemessagescope"
      }
    },
    "constructor": {},
    "types": {},
    "variables": {},
    "modules": {},
    "objects": {}
  },
  "RandomNumberGenerator": {
    "isBeta": false,
    "implementsExtendsName": "IRandomNumberGenerator",
    "genericType": "",
    "descr": "This is the default implementation of IRandomNumberGenerator that simply calls Math.random().",
    "remarks": null,
    "properties": {
      "serviceKey": {
        "descr": "The service key for IRandomNumberGenerator.",
        "remarks": null,
        "dataType": "ServiceKey<IRandomNumberGenerator>",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      }
    },
    "functions": {},
    "methods": {
      "generate-randomnumbergenerator": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public generate(): number;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "number",
        "returnDescr": "",
        "params": [],
        "docName": "generate()",
        "mdLink": "generate"
      }
    },
    "constructor": {
      "isBeta": false,
      "showBetaMessage": false,
      "descr": "",
      "remarks": null,
      "signature": "constructor(serviceScope: ServiceScope);",
      "genericType": null,
      "returnType": "",
      "returnDescr": "",
      "params": [],
      "docName": "constructor()",
      "mdLink": "constructor"
    },
    "types": {},
    "variables": {},
    "modules": {},
    "objects": {}
  },
  "ServiceKey": {
    "isBeta": false,
    "implementsExtendsName": "",
    "genericType": "T",
    "descr": "The ServiceKey is a lookup key that is used when calling ServiceScope.consume() to fetch a dependency. The key also defines a default implementation of the dependency, which will be autocreated by the root scope if the dependency is not found. Providing a default implementation ensures that new dependencies can be safely introduced without inadvertently breaking components that are loaded by an older host (that does not provide the new dependency).",
    "remarks": null,
    "properties": {
      "defaultCreator": {
        "descr": "",
        "remarks": null,
        "dataType": "ServiceCreator<T>",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "id": {
        "descr": "",
        "remarks": null,
        "dataType": "string",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "name": {
        "descr": "",
        "remarks": null,
        "dataType": "string",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      }
    },
    "functions": {},
    "methods": {
      "create-servicekey": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "Constructs a new ServiceKey whose default implementation will be a new instance of a TypeScript class that accepts the standard constructor parameter. If you want to specify custom constructor parameters, use createCustom() instead.",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public static create < T >(name: string,\r\n    serviceClass: { new (serviceScope: ServiceScope); }): ServiceKey<T>;",
        "isStatic": true,
        "isOptional": false,
        "genericType": null,
        "returnType": "ServiceKey<T>",
        "returnDescr": "- the newly created ServiceKey",
        "params": [
          {
            "name": "name",
            "descr": "A name such as \"MyApplication.IMyService\" which should be unique within your application.",
            "isOptional": false,
            "dataType": "string"
          },
          {
            "name": "serviceClass",
            "descr": "the TypeScript class that implements the service.",
            "isOptional": false,
            "dataType": "{ new (serviceScope: ServiceScope); }"
          }
        ],
        "docName": "create(name,serviceClass)",
        "mdLink": "createnameserviceclass"
      },
      "createCustom-servicekey": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "Constructs a new ServiceKey whose default implementation will be obtained by invoking the specified callback.",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public static createCustom < T >(name: string, defaultCreator: ServiceCreator<T>): ServiceKey<T>;",
        "isStatic": true,
        "isOptional": false,
        "genericType": null,
        "returnType": "ServiceKey<T>",
        "returnDescr": "- the newly created ServiceKey",
        "params": [
          {
            "name": "name",
            "descr": "A name such as \"MyApplication.IMyService\" which should be unique within your application.",
            "isOptional": false,
            "dataType": "string"
          },
          {
            "name": "defaultCreator",
            "descr": "A callback that returns an object that implements the T interface",
            "isOptional": false,
            "dataType": "ServiceCreator<T>"
          }
        ],
        "docName": "createCustom(name,defaultCreator)",
        "mdLink": "createcustomnamedefaultcreator"
      }
    },
    "constructor": {},
    "types": {},
    "variables": {},
    "modules": {},
    "objects": {}
  },
  "ServiceScope": {
    "isBeta": false,
    "implementsExtendsName": "",
    "genericType": "",
    "descr": "ServiceScope provides a formalized way for components to register and consume dependencies (\"services\"), and to enable different implementations to be registered in different scopes. This improves modularity by decoupling components from their dependencies in an extensible way. For example, suppose that various components need access to an IPageManager instance. We could simply make the PageManager a singleton (i.e. global variable), but this will not work e.g. if we need to create a pop-up dialog that requires a second PageManager instance. A better solution would be to add the PageManager as a constructor parameter for each component that requires it, however then we immediately face the problem that any code that calls these constructors also needs a PageManager parameter. In an application with many such dependencies, business logic that ties together many subsystems would eventually pick up a constructor parameter for every possible dependency, which is unwieldy. A natural solution would be to move all the dependencies into a class with name like \"ApplicationContext\", and then pass this around as our constructor parameter. This enables the PageManager to be passed to classes that need it without cluttering the intermediary classes that don't. However, it still has a design problem that \"ApplicationContext\" has hard-coded dependencies on many unrelated things. A more flexible approach is to make it a dictionary that can look up items for consumers/providers who know the right lookup key (i.e. ServiceKey). This is the popular \"service locator\" design pattern, familiar from the SPContext API in classic SharePoint. ServiceScope takes this idea a step further in two important ways: First, it provides a scoping mechanism so that e.g. if we had two different pages, they could each consume a unique PageManager instance while still sharing other common dependencies. Secondly, it allows for a ServiceKey to provide a default implementation of the dependency. This is important for API stability in our modular client-side environment: For example, suppose that version 2.0 of our application introduced a new IDiagnosticTracing interface that a version 2.0 component will expect to consume. If the version 2.0 component gets loaded by an older 1.0 application, it would fail. We could fix this by requiring each consumer to check for any missing dependencies and handle that case, but it would require a lot of checks. A better solution is to ensure that a default implementation always exists, perhaps just a trivial behavior, so that components don't have to worry about it. Usage: ServiceScope instances are created by calling either ServiceScope.startNewRoot() or ServiceScope.startNewChild(). They are initially in an \"unfinished\" state, during which provide() can be called to register service keys, but consume() is forbidden. After ServiceScope.finish() is called, consume() is allowed and provide() is now forbidden. These semantics ensure that ServiceScope.consume() always returns the same result for the same key, and does not depend on order of initialization. It also allows us to support circular dependencies without worrying about infinite loops, even when working with external components that were implemented by third parties. To avoid mistakes, it's best to always call consume() inside a callback from serviceScope.whenFinished().",
    "remarks": null,
    "properties": {},
    "functions": {},
    "methods": {
      "consume-servicescope": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "Components should call this function to \"consume\" a dependency, i.e. look up the serviceKey and return the registered service instance. If the instance cannot be found, then a default instance will be autocreated and registered with the root ServiceScope.",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public consume < T >(serviceKey: ServiceKey<T>): T;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "T",
        "returnDescr": "- the service instance",
        "params": [
          {
            "name": "serviceKey",
            "descr": "the key that was used when provide() was called to register the service",
            "isOptional": false,
            "dataType": "ServiceKey<T>"
          }
        ],
        "docName": "consume(serviceKey)",
        "mdLink": "consumeservicekey"
      },
      "createAndProvide-servicescope": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "This is a shorthand function that its equivalent to constructing a new instance of the simpleServiceClass, then registering it by calling ServiceScope.provide().",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public createAndProvide < T >(serviceKey: ServiceKey<T>,\r\n    simpleServiceClass: { new (serviceScope: ServiceScope); }): T;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "T",
        "returnDescr": "- a newly constructed instance of simpleServiceClass",
        "params": [
          {
            "name": "serviceKey",
            "descr": "the key that can be used later to consume the service",
            "isOptional": false,
            "dataType": "ServiceKey<T>"
          },
          {
            "name": "simpleServiceClass",
            "descr": "the TypeScript class to be constructed",
            "isOptional": false,
            "dataType": "{ new (serviceScope: ServiceScope); }"
          }
        ],
        "docName": "createAndProvide(serviceKey,simpleServiceClass)",
        "mdLink": "createandprovideservicekeysimpleserviceclass"
      },
      "createDefaultAndProvide-servicescope": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "This is a shorthand function that constructs the default implementation of the specified serviceKey, and then registers it by calling ServiceScope.provide().",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public createDefaultAndProvide < T >(serviceKey: ServiceKey<T>): T;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "T",
        "returnDescr": "- a service instance that was constructed using ServiceKey.defaultCreator",
        "params": [
          {
            "name": "serviceKey",
            "descr": "the key that can be used later to consume the service",
            "isOptional": false,
            "dataType": "ServiceKey<T>"
          }
        ],
        "docName": "createDefaultAndProvide(serviceKey)",
        "mdLink": "createdefaultandprovideservicekey"
      },
      "finish-servicescope": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "When a ServiceScope is first started, it is in an \"unfinished\" state where provide() is allowed but consume() is not allowed. After calling finish(), then consume() is allowed but provide() is not allowed. This formalism completely eliminates a number of tricky bugs such as: Scope2 is a child of Scope1, and Scope1 provides instance A1 of interface A; if someone consumes A1 from Scope2 (via inheritance) before Scope2.provide() is called with A2, then a subsequent call to Scope2.consume() might return a different result than the previous call, which would be very confusing for developers.",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public finish(): void;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "void",
        "returnDescr": "",
        "params": [],
        "docName": "finish()",
        "mdLink": "finish"
      },
      "getParent-servicescope": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "Returns the parent of the current ServiceScope, or undefined if this is a root scope.",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public getParent(): ServiceScope | undefined;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "ServiceScope | undefined",
        "returnDescr": "- the parent service scope",
        "params": [],
        "docName": "getParent()",
        "mdLink": "getparent"
      },
      "provide-servicescope": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "ServiceScope.provide() is used to register an implemententation of the given serviceKey for the current scope. It may only be used when the ServiceScope is in an \"unfinished\" state, i.e. before finish() has been called.",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public provide < T >(serviceKey: ServiceKey<T>, service: T): T;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "T",
        "returnDescr": "- the same object that was passed as the \"service\" parameter",
        "params": [
          {
            "name": "serviceKey",
            "descr": "the key that will later be used to consume the service",
            "isOptional": false,
            "dataType": "ServiceKey<T>"
          },
          {
            "name": "service",
            "descr": "the service instance that is being registered",
            "isOptional": false,
            "dataType": "T"
          }
        ],
        "docName": "provide(serviceKey,service)",
        "mdLink": "provideservicekeyservice"
      },
      "startNewChild-servicescope": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "Constructs a new ServiceScope that is a child of the current scope. For any keys that are not explicitly provided by the child scope, the parent hierarchy will be consulted.",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public startNewChild(): ServiceScope;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "ServiceScope",
        "returnDescr": "- the newly created root ServiceScope",
        "params": [],
        "docName": "startNewChild()",
        "mdLink": "startnewchild"
      },
      "startNewRoot-servicescope": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "Create a new root-level ServiceScope. Only root-level scopes have the ability to autocreate default implementations of ServiceKeys.",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public static startNewRoot(): ServiceScope;",
        "isStatic": true,
        "isOptional": false,
        "genericType": null,
        "returnType": "ServiceScope",
        "returnDescr": "- the newly created root ServiceScope",
        "params": [],
        "docName": "startNewRoot()",
        "mdLink": "startnewroot"
      },
      "whenFinished-servicescope": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "It is an error to call ServiceScope.consume() before finish() has been called. The most reliable way to protect your component against this error is to perform the consume() calls inside a whenFinished() callback. If the service scope is already finished, then the callback will be executed immediately; otherwise, it will be executed later when the scope is finished.",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public whenFinished(callback: () => void): void;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "void",
        "returnDescr": "",
        "params": [
          {
            "name": "callback",
            "descr": "A block of code that needs to call ServiceScope.consume()",
            "isOptional": false,
            "dataType": "() => void"
          }
        ],
        "docName": "whenFinished(callback)",
        "mdLink": "whenfinishedcallback"
      }
    },
    "constructor": {},
    "types": {},
    "variables": {},
    "modules": {},
    "objects": {}
  },
  "Session": {
    "isBeta": false,
    "implementsExtendsName": "",
    "genericType": "",
    "descr": "This class contains contextual information about the application's current session.",
    "remarks": null,
    "properties": {
      "applicationId": {
        "descr": "A unique identifier used to correlate logging and other diagnostic information. Its lifetime persists for the duration of the client-side application instance, i.e. it begins with the server request that renders the page, and ends e.g. when the browser tab is closed or F5 is pressed to reload the page. Note that if the application's router supports in-place navigation (via the history.pushState() API), the application session persists across these transitions.",
        "remarks": null,
        "dataType": "Guid",
        "isOptional": false,
        "readonly": true,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "pageId": {
        "descr": "A unique identifier used to correlate logging and other diagnostic information. Whereas the applicationId tracks the entire lifetime of the client-side application instance, the pageId tracks an individual \"page\" that is rendered. For example, suppose that the application initially loads PageA, then the user does in-place navigation (via the history.pushState() API) to PageB, then navigates back to PageA, and finally they close the browser tab. During this sequence, the applicationId will remain the same, however the pageId will change on each navigation. The 3 different pageId values are used by the diagnostics e.g. to track success/failure statistics for PageA independently of PageB. The concept of a \"page\" is application-defined.",
        "remarks": null,
        "dataType": "Guid",
        "isOptional": false,
        "readonly": true,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      }
    },
    "functions": {},
    "methods": {},
    "constructor": {},
    "types": {},
    "variables": {},
    "modules": {},
    "objects": {}
  },
  "Text": {
    "isBeta": false,
    "implementsExtendsName": "",
    "genericType": "",
    "descr": "Common helper functions for working with strings. These utilities are intended to be simple, small, and very broadly applicable.",
    "remarks": null,
    "properties": {},
    "functions": {},
    "methods": {
      "format-text": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "String Format, like C# string format. Usage Example: StringUtilities.format(\"hello {0}!\", \"mike\") will return \"hello mike!\"",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public static format(s: string, ...values: any[]): string;",
        "isStatic": true,
        "isOptional": false,
        "genericType": null,
        "returnType": "string",
        "returnDescr": "",
        "params": [],
        "docName": "format()",
        "mdLink": "format"
      }
    },
    "constructor": {},
    "types": {},
    "variables": {},
    "modules": {},
    "objects": {}
  },
  "TimeProvider": {
    "isBeta": false,
    "implementsExtendsName": "ITimeProvider",
    "genericType": "",
    "descr": "This is the default implementation of ITimeProvider that simply calls the real browser APIs.",
    "remarks": null,
    "properties": {
      "serviceKey": {
        "descr": "The service key for ITimeProvider.<br/> _This API is provided as a preview for developers and may change based on feedback that we receive.  Do not use this API in a production environment._",
        "remarks": null,
        "dataType": "ServiceKey<ITimeProvider>",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      }
    },
    "functions": {},
    "methods": {
      "getDate-timeprovider": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public getDate(): Date;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "Date",
        "returnDescr": "",
        "params": [],
        "docName": "getDate()",
        "mdLink": "getdate"
      },
      "getTimestamp-timeprovider": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public getTimestamp(): number;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "number",
        "returnDescr": "",
        "params": [],
        "docName": "getTimestamp()",
        "mdLink": "gettimestamp"
      }
    },
    "constructor": {
      "isBeta": false,
      "showBetaMessage": false,
      "descr": "",
      "remarks": null,
      "signature": "constructor(serviceScope: ServiceScope);",
      "genericType": null,
      "returnType": "",
      "returnDescr": "",
      "params": [],
      "docName": "constructor()",
      "mdLink": "constructor"
    },
    "types": {},
    "variables": {},
    "modules": {},
    "objects": {}
  },
  "UrlQueryParameterCollection": {
    "isBeta": false,
    "implementsExtendsName": "",
    "genericType": "",
    "descr": "Class for storing and retrieving query parameters. The URL can be server-relative and it will parse empty/null strings. The query parameters must start with ? to indicate the first query parameter and use & for all subsequent parameters. The class also supports fragments. Edge cases behavior: Empty value (www.example.com/?test=) stores key and empty value No equals in queryParam (www.example.com/?test) stores key and undefined value Empty queryParam (www.example.com/?&debug=on) stores undefined key and value Query param with only equals (www.example.com/?=&debug=on stores empty string key and value",
    "remarks": null,
    "properties": {},
    "functions": {},
    "methods": {
      "getValue-urlqueryparametercollection": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "Returns the value of the first matching query parameter or undefined if the key doesn't exist. Examples: this._queryParameterList = [ {key: TEST, value: done}, {key: DEBUG, value: false}, {key: TEST, value: notdone}] getValue('TEST') ---> 'done' getValue('debug') ---> 'false' getValue('lost') ---> undefined",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public getValue(param: string): string | undefined;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "string | undefined",
        "returnDescr": "",
        "params": [
          {
            "name": "param",
            "descr": "the case insensitive key for the desired query parameter value.",
            "isOptional": false,
            "dataType": "string"
          }
        ],
        "docName": "getValue(param)",
        "mdLink": "getvalueparam"
      },
      "getValues-urlqueryparametercollection": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "Returns the values of all of the matching query parameters or undefined if the key doesn't exist. Examples: this._queryParameterList = [ {key: TEST, value: done}, {key: DEBUG, value: false}, {key: TEST, value: notdone}] getValues('TEST') ---> ['done', 'notdone'] getValues('debug') ---> ['false'] getValues('lost') ---> undefined",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public getValues(param: string): (string | undefined)[] | undefined;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "(string | undefined)[] | undefined",
        "returnDescr": "",
        "params": [
          {
            "name": "param",
            "descr": "the case insensitive key for the desired query parameter value.",
            "isOptional": false,
            "dataType": "string"
          }
        ],
        "docName": "getValues(param)",
        "mdLink": "getvaluesparam"
      }
    },
    "constructor": {
      "isBeta": false,
      "showBetaMessage": false,
      "descr": "",
      "remarks": null,
      "signature": "constructor(url: string);",
      "genericType": null,
      "returnType": "",
      "returnDescr": "",
      "params": [],
      "docName": "constructor()",
      "mdLink": "constructor"
    },
    "types": {},
    "variables": {},
    "modules": {},
    "objects": {}
  },
  "Validate": {
    "isBeta": false,
    "implementsExtendsName": "",
    "genericType": "",
    "descr": "This class implements provides a standard way to validate properties and function parameters. Unlike debug assertions, Validate checks are always performed and will always throw an error, even in a production release. As such, be careful not to overuse these checks in a way that might impact performance.",
    "remarks": null,
    "properties": {},
    "functions": {},
    "methods": {
      "isNonemptyString-validate": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "Throws an exception if the specified string is null, undefined, or an empty string.",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public static isNonemptyString(value: string | undefined | null, variableName: string): void;",
        "isStatic": true,
        "isOptional": false,
        "genericType": null,
        "returnType": "void",
        "returnDescr": "",
        "params": [
          {
            "name": "value",
            "descr": "the value to check",
            "isOptional": false,
            "dataType": "string | undefined | null"
          },
          {
            "name": "variableName",
            "descr": "the program variable name, which will be mentioned in the error message",
            "isOptional": false,
            "dataType": "string"
          }
        ],
        "docName": "isNonemptyString(value,variableName)",
        "mdLink": "isnonemptystringvaluevariablename"
      },
      "isNotNullOrUndefined-validate": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "Throws an exception if the specified value is null or undefined.",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public static isNotNullOrUndefined(value: any, variableName: string): void;",
        "isStatic": true,
        "isOptional": false,
        "genericType": null,
        "returnType": "void",
        "returnDescr": "",
        "params": [
          {
            "name": "value",
            "descr": "the value to check",
            "isOptional": false,
            "dataType": "any"
          },
          {
            "name": "variableName",
            "descr": "the program variable name, which will be mentioned in the error message",
            "isOptional": false,
            "dataType": "string"
          }
        ],
        "docName": "isNotNullOrUndefined(value,variableName)",
        "mdLink": "isnotnullorundefinedvaluevariablename"
      },
      "isTrue-validate": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "Throws an exception if the specified value is not true.",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public static isTrue(value: boolean | undefined | null, variableName: string): void;",
        "isStatic": true,
        "isOptional": false,
        "genericType": null,
        "returnType": "void",
        "returnDescr": "",
        "params": [
          {
            "name": "value",
            "descr": "the value to check",
            "isOptional": false,
            "dataType": "boolean | undefined | null"
          },
          {
            "name": "variableName",
            "descr": "the program variable name, which will be mentioned in the error message",
            "isOptional": false,
            "dataType": "string"
          }
        ],
        "docName": "isTrue(value,variableName)",
        "mdLink": "istruevaluevariablename"
      }
    },
    "constructor": {},
    "types": {},
    "variables": {},
    "modules": {},
    "objects": {}
  },
  "Version": {
    "isBeta": false,
    "implementsExtendsName": "",
    "genericType": "",
    "descr": "This class represents versions that follow the string format of MAJOR.MINOR[.PATCH[.REVISION]] where MAJOR, MINOR, PATCH and REVISION are integers. PATCH and REVISION are optional. Leading zeros are allowed, but have no meaning in comparisons. Examples: 1.0, 1.0.0, 1.0.0.0, 1.01, 01.02.03, 001.002.003.004",
    "remarks": null,
    "properties": {
      "major": {
        "descr": "The first number in the version string indicating the major version",
        "remarks": null,
        "dataType": "number",
        "isOptional": false,
        "readonly": true,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "minor": {
        "descr": "The second number in the version string indicating the minor version",
        "remarks": null,
        "dataType": "number",
        "isOptional": false,
        "readonly": true,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "patch": {
        "descr": "The thrid number in the version string indicating the patch number in a semantic version or the build number in a .NET System.Version class Set to undefined if the third number does not exist",
        "remarks": null,
        "dataType": "number | undefined",
        "isOptional": false,
        "readonly": true,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "revision": {
        "descr": "The fourth number in the version string indicating the revision number Set to undefined if the fourth number does not exist",
        "remarks": null,
        "dataType": "number | undefined",
        "isOptional": false,
        "readonly": true,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      }
    },
    "functions": {},
    "methods": {
      "compare-version": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "Compares two Version classes",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public static compare(v1: Version, v2: Version): number;",
        "isStatic": true,
        "isOptional": false,
        "genericType": null,
        "returnType": "number",
        "returnDescr": "-1 if the first input is less than the second input, 0 if the first input is equal to the second input, 1 if the first input is greater than the second input.",
        "params": [
          {
            "name": "v1",
            "descr": "The first version class for comparison",
            "isOptional": false,
            "dataType": "Version"
          },
          {
            "name": "v2",
            "descr": "The second version class for comparison",
            "isOptional": false,
            "dataType": "Version"
          }
        ],
        "docName": "compare(v1,v2)",
        "mdLink": "comparev1v2"
      },
      "equals-version": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "Checks if this version is equal to the input parameter. Missing patch number is treated as zero. Examples: 1.0.0 equals 1.0.0 -> true 2.0.1 equals 2.0.0 -> false 3.0 equals 3.0.0 -> true 04.01 equals 4.1 -> true",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public equals(compareWith: Version): boolean;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "boolean",
        "returnDescr": "A boolean indicating if this version is equal to the input parameter",
        "params": [
          {
            "name": "compareWith",
            "descr": "The version to compare with",
            "isOptional": false,
            "dataType": "Version"
          }
        ],
        "docName": "equals(compareWith)",
        "mdLink": "equalscomparewith"
      },
      "greaterThan-version": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "Checks if this version is greater (i.e. newer) than the input parameter. Missing patch number is treated as zero Examples: 1.0.0 greaterThan 0.0.9 -> true 2.0 greaterThan 2.0.0 -> false 3.0.1 greaterThan 3.0 -> true",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public greaterThan(compareWith: Version): boolean;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "boolean",
        "returnDescr": "A boolean indicating if this version is greater than the input parameter",
        "params": [
          {
            "name": "compareWith",
            "descr": "The version to compare with",
            "isOptional": false,
            "dataType": "Version"
          }
        ],
        "docName": "greaterThan(compareWith)",
        "mdLink": "greaterthancomparewith"
      },
      "isValid-version": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "Indicates whether a version string is valid",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public static isValid(versionString: string | undefined | null): boolean;",
        "isStatic": true,
        "isOptional": false,
        "genericType": null,
        "returnType": "boolean",
        "returnDescr": "Value indicating whether the version is valid.",
        "params": [
          {
            "name": "versionString",
            "descr": "The version string",
            "isOptional": false,
            "dataType": "string | undefined | null"
          }
        ],
        "docName": "isValid(versionString)",
        "mdLink": "isvalidversionstring"
      },
      "lessThan-version": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "Checks if this version is less (i.e. older) than the input parameter. Missing patch number is treated as zero Examples: 0.9.9 lessThan 1.0.0 -> true 2.0 lessThan 2.0.0 -> false 3.0 lessThan 3.0.1 -> true 04.01 lessThan 4.1 -> false",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public lessThan(compareWith: Version): boolean;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "boolean",
        "returnDescr": "A boolean indicating if this version is less than the input parameter",
        "params": [
          {
            "name": "compareWith",
            "descr": "The version to compare with",
            "isOptional": false,
            "dataType": "Version"
          }
        ],
        "docName": "lessThan(compareWith)",
        "mdLink": "lessthancomparewith"
      },
      "parse-version": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "Constructs a new Version instance using the version string. tryParse validates the input version string and throws error if it is invalid",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public static parse(versionString: string | undefined | null): Version;",
        "isStatic": true,
        "isOptional": false,
        "genericType": null,
        "returnType": "Version",
        "returnDescr": "If valid, a new Version instace",
        "params": [
          {
            "name": "versionString",
            "descr": "A version string",
            "isOptional": false,
            "dataType": "string | undefined | null"
          }
        ],
        "docName": "parse(versionString)",
        "mdLink": "parseversionstring"
      },
      "satisfies-version": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "Checks if this version satisfies the input parameter, therefore it's backwards compatible. They have to share the same major version, and the input parameter must be an equal or more recent version. Examples: 1.0.0 satisfies 1.0.0 -> true 1.1.0 satisfies 1.0.0 -> true 2.0.0 satisfies 1.0.0 -> false 1.0.0 satisfies 1.1.0 -> false",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public satisfies(compareWith: Version): boolean;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "boolean",
        "returnDescr": "A boolean indicating if this version is compatible with the input parameter",
        "params": [
          {
            "name": "compareWith",
            "descr": "The version to compare with",
            "isOptional": false,
            "dataType": "Version"
          }
        ],
        "docName": "satisfies(compareWith)",
        "mdLink": "satisfiescomparewith"
      },
      "toString-version": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "Object.prototype.toString override The version string in MAJOR.MINOR[.PATCH[.REVISION]]",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public toString(): string;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "string",
        "returnDescr": "",
        "params": [],
        "docName": "toString()",
        "mdLink": "tostring"
      },
      "tryParse-version": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "Tries to construct a new Version instance using the version string. Returns undefined if not successful.",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public static tryParse(versionString: string | undefined | null): Version | undefined;",
        "isStatic": true,
        "isOptional": false,
        "genericType": null,
        "returnType": "Version | undefined",
        "returnDescr": "If valid, a new Version instace. Otherwise, undefined.",
        "params": [
          {
            "name": "versionString",
            "descr": "A version string",
            "isOptional": false,
            "dataType": "string | undefined | null"
          }
        ],
        "docName": "tryParse(versionString)",
        "mdLink": "tryparseversionstring"
      }
    },
    "constructor": {},
    "types": {},
    "variables": {},
    "modules": {},
    "objects": {}
  }
}