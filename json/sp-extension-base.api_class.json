{
  "BaseComponentContext": {
    "isBeta": false,
    "implementsExtendsName": "",
    "genericType": "",
    "descr": "The base class for context objects for client-side components.",
    "remarks": "A \"context\" object is a collection of well-known services and other objects that are likely to be needed by any business logic working with the associated component. Each component type has its own specialized subclass ofClientSideComponentContext, e.g. WebPartContext for web parts, ExtensionContext for client-side extensions, etc.",
    "properties": {
      "manifest": {
        "descr": "Manifest for the client side component.",
        "remarks": null,
        "dataType": "IClientSideComponentManifest",
        "isOptional": false,
        "readonly": true,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "serviceScope": {
        "descr": "Service scope instance that is scoped to this particular web part.",
        "remarks": null,
        "dataType": "ServiceScope",
        "isOptional": false,
        "readonly": true,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      }
    },
    "functions": {},
    "methods": {
      "getBaseManifest-basecomponentcontext": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "The child class's overridden \"manifest\" property should call this method.",
        "remarks": "This is a workaround for a TypeScript/ES5 limitation, which prevents a subclass using \"super\" to access properties from the base class (even though functions work okay). It will be fixed in TypeScript/ES6.",
        "accessModifier": "protected",
        "signature": "protected getBaseManifest(): IClientSideComponentManifest;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "IClientSideComponentManifest",
        "returnDescr": "",
        "params": [],
        "docName": "getBaseManifest()",
        "mdLink": "getbasemanifest"
      }
    },
    "constructor": {
      "isBeta": false,
      "showBetaMessage": false,
      "descr": "",
      "remarks": null,
      "signature": "constructor(parameters: IComponentContextParameters);",
      "genericType": null,
      "returnType": "",
      "returnDescr": "",
      "params": [],
      "docName": "constructor()",
      "mdLink": "constructor"
    },
    "types": {},
    "variables": {},
    "modules": {},
    "objects": {}
  },
  "BaseExtension": {
    "isBeta": false,
    "implementsExtendsName": "",
    "genericType": "",
    "descr": "The base class for all client-side extensions.",
    "remarks": null,
    "properties": {
      "properties": {
        "descr": "Extension properties is a JavaScript object that are passed in by the application that initializes the extension.",
        "remarks": "Properties can be used in the extension code to define configurable behaviors. The application has control over what properies to provide to an instance of the extension, however the most common way would be to have it stored on the server as JSON and pass it as is to the extension on initialization.",
        "dataType": "IBaseExtensionProperties | undefined",
        "isOptional": false,
        "readonly": true,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      }
    },
    "functions": {},
    "methods": {
      "getBaseProperties-baseextension": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "The child class's \"properties\" property getter should call this method.",
        "remarks": "This is a workaround for a TypeScript/ES5 limitation, which prevents a subclass's \"context\" property from using \"super\" to access the base class's implementation.",
        "accessModifier": "protected",
        "signature": "protected getBaseProperties(): IBaseExtensionProperties | undefined;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "IBaseExtensionProperties | undefined",
        "returnDescr": "",
        "params": [],
        "docName": "getBaseProperties()",
        "mdLink": "getbaseproperties"
      },
      "onDispose-baseextension": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "This event hook is called immediately before the extension stops being used. It provides an opportunity to release any associated resources, cancel any outstanding requests, etc.",
        "remarks": null,
        "accessModifier": "public",
        "signature": "@virtual public onDispose(): void;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "void",
        "returnDescr": "",
        "params": [],
        "docName": "onDispose()",
        "mdLink": "ondispose"
      },
      "onInit-baseextension": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "This event hook is called when the client-side extension is first activated on the page.",
        "remarks": null,
        "accessModifier": "public",
        "signature": "@virtual public onInit(): Promise<void>;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "Promise<void>",
        "returnDescr": "",
        "params": [],
        "docName": "onInit()",
        "mdLink": "oninit"
      }
    },
    "constructor": {},
    "types": {},
    "variables": {},
    "modules": {},
    "objects": {}
  },
  "ExtensionContext": {
    "isBeta": false,
    "implementsExtendsName": "",
    "genericType": "",
    "descr": "The base class for context objects for client-side extensions.",
    "remarks": null,
    "properties": {
      "graphHttpClient": {
        "descr": "The instance of GraphHttpClient created for this instance of extension",
        "remarks": null,
        "dataType": "GraphHttpClient",
        "isOptional": false,
        "readonly": true,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "httpClient": {
        "descr": "The instance of HttpClient created for this instance of extension",
        "remarks": null,
        "dataType": "HttpClient",
        "isOptional": false,
        "readonly": true,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "spHttpClient": {
        "descr": "The instance of SpHttpClient created for this instance of extension",
        "remarks": null,
        "dataType": "SPHttpClient",
        "isOptional": false,
        "readonly": true,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      }
    },
    "functions": {},
    "methods": {},
    "constructor": {
      "isBeta": false,
      "showBetaMessage": false,
      "descr": "Creates a new instance of extension context",
      "remarks": null,
      "signature": "constructor(parameters: IExtensionContextParameters);",
      "genericType": null,
      "returnType": "",
      "returnDescr": "",
      "params": [],
      "docName": "constructor()",
      "mdLink": "constructor"
    },
    "types": {},
    "variables": {},
    "modules": {},
    "objects": {}
  }
}