{
  "Promise": {
    "isBeta": false,
    "implementsExtendsName": "Thenable",
    "genericType": "T",
    "descr": "",
    "remarks": null,
    "properties": {},
    "functions": {},
    "methods": {
      "all-promise": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "Make a promise that fulfills when every item in the array fulfills, and rejects if (and when) any item rejects. the array passed to all can be a mixture of promise-like objects and other objects. The fulfillment value is an array (in order) of fulfillment values. The rejection value is the first rejection value.",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public static all < T1, T2, T3, T4, T5, T6, T7, T8, T9, T10 >(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3 | Thenable<T3>, T4 | Thenable <T4>, T5 | Thenable<T5>, T6 | Thenable<T6>, T7 | Thenable<T7>, T8 | Thenable<T8>, T9 | Thenable<T9>, T10 | Thenable<T10>]): Promise<[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]>;",
        "isStatic": true,
        "isOptional": false,
        "genericType": null,
        "returnType": "Promise<[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]>",
        "returnDescr": "",
        "params": [],
        "docName": "all()",
        "mdLink": "all"
      },
      "catch-promise": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "Sugar for promise.then(undefined, onRejected)",
        "remarks": null,
        "accessModifier": "",
        "signature": "catch < U >(onRejected?: (error: any) => U | Thenable<U>): Promise<U>;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "Promise<U>",
        "returnDescr": "",
        "params": [
          {
            "name": "onRejected",
            "descr": "called when/if \"promise\" rejects",
            "isOptional": true,
            "dataType": "(error: any) => U | Thenable<U>"
          }
        ],
        "docName": "catch(onRejected)",
        "mdLink": "catchonrejected"
      },
      "race-promise": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "Make a Promise that fulfills when any item fulfills, and rejects if any item rejects.",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public static race < T >(promises: (T | Thenable<T>)[]): Promise<T>;",
        "isStatic": true,
        "isOptional": false,
        "genericType": null,
        "returnType": "Promise<T>",
        "returnDescr": "",
        "params": [],
        "docName": "race()",
        "mdLink": "race"
      },
      "reject-promise": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "Make a promise that rejects to obj. For consistency and debugging (eg stack traces), obj should be an instanceof Error",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public static reject(error: any): Promise<any>;",
        "isStatic": true,
        "isOptional": false,
        "genericType": null,
        "returnType": "Promise<any>",
        "returnDescr": "",
        "params": [],
        "docName": "reject()",
        "mdLink": "reject"
      },
      "resolve-promise": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "Make a new promise from the thenable. A thenable is promise-like in as far as it has a \"then\" method.",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public static resolve < T >(value?: T | Thenable<T>): Promise<T>;",
        "isStatic": true,
        "isOptional": false,
        "genericType": null,
        "returnType": "Promise<T>",
        "returnDescr": "",
        "params": [],
        "docName": "resolve()",
        "mdLink": "resolve"
      },
      "then-promise": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "onFulfilled is called when/if \"promise\" resolves. onRejected is called when/if \"promise\" rejects. Both are optional, if either/both are omitted the next onFulfilled/onRejected in the chain is called. Both callbacks have a single parameter , the fulfillment value or rejection reason. \"then\" returns a new promise equivalent to the value you return from onFulfilled/onRejected after being passed through Promise.resolve. If an error is thrown in the callback, the returned promise rejects with that error.",
        "remarks": null,
        "accessModifier": "",
        "signature": "then < U >(onFulfilled?: (value: T) => U | Thenable<U>, onRejected?: (error: any) => U | Thenable<U>): Promise<U>;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "Promise<U>",
        "returnDescr": "",
        "params": [
          {
            "name": "onFulfilled",
            "descr": "called when/if \"promise\" resolves",
            "isOptional": true,
            "dataType": "(value: T) => U | Thenable<U>"
          },
          {
            "name": "onRejected",
            "descr": "called when/if \"promise\" rejects",
            "isOptional": true,
            "dataType": "(error: any) => U | Thenable<U>"
          }
        ],
        "docName": "then(onFulfilled,onRejected)",
        "mdLink": "thenonfulfilledonrejected"
      }
    },
    "constructor": {
      "isBeta": false,
      "showBetaMessage": false,
      "descr": "If you call resolve in the body of the callback passed to the constructor, your promise is fulfilled with result object passed to resolve. If you call reject your promise is rejected with the object passed to reject. For consistency and debugging (eg stack traces), obj should be an instanceof Error. Any errors thrown in the constructor callback will be implicitly passed to reject().",
      "remarks": null,
      "accessModifier": "",
      "signature": "constructor(callback: (resolve: (value?: T | Thenable<T>) => void, reject: (error?: any) => void) => void);",
      "isStatic": false,
      "isOptional": false,
      "genericType": null,
      "returnType": "",
      "returnDescr": "",
      "params": [],
      "docName": "constructor()",
      "mdLink": "constructor"
    },
    "types": {},
    "variables": {},
    "modules": {},
    "objects": {}
  }
}