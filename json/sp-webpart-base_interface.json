{
  "IClientSideWebPartStatusRenderer": {
    "isBeta": false,
    "implementsExtendsName": "",
    "genericType": "",
    "descr": "Interface to be implemented by a component that should display the loading indicator and error messages for a webpart.",
    "remarks": null,
    "properties": {},
    "functions": {},
    "methods": {
      "clearError-iclientsidewebpartstatusrenderer": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "Clear the webpart error message.",
        "remarks": null,
        "accessModifier": "",
        "signature": "clearError(domElement: HTMLElement): void;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "void",
        "returnDescr": "",
        "params": [
          {
            "name": "domElement",
            "descr": "the webpart container div.",
            "isOptional": false,
            "dataType": "HTMLElement"
          }
        ],
        "docName": "clearError(domElement)",
        "mdLink": "clearerrordomelement"
      },
      "clearLoadingIndicator-iclientsidewebpartstatusrenderer": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "Clear the loading indicator.",
        "remarks": null,
        "accessModifier": "",
        "signature": "clearLoadingIndicator(domElement: Element): void;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "void",
        "returnDescr": "",
        "params": [
          {
            "name": "domElement",
            "descr": "the webpart container div.",
            "isOptional": false,
            "dataType": "Element"
          }
        ],
        "docName": "clearLoadingIndicator(domElement)",
        "mdLink": "clearloadingindicatordomelement"
      },
      "displayLoadingIndicator-iclientsidewebpartstatusrenderer": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "Display a loading spinner.",
        "remarks": null,
        "accessModifier": "",
        "signature": "displayLoadingIndicator(domElement: Element, loadingMessage: string, timeout?: number): void;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "void",
        "returnDescr": "",
        "params": [
          {
            "name": "domElement",
            "descr": "the webpart container div.",
            "isOptional": false,
            "dataType": "Element"
          },
          {
            "name": "loadingMessage",
            "descr": "the message to be displayed when the loading spinner id displayed.",
            "isOptional": false,
            "dataType": "string"
          },
          {
            "name": "timeout",
            "descr": "timeout to render the loading indicator. Default is 900ms.",
            "isOptional": true,
            "dataType": "number"
          }
        ],
        "docName": "displayLoadingIndicator(domElement,loadingMessage,timeout)",
        "mdLink": "displayloadingindicatordomelementloadingmessagetimeout"
      },
      "renderError-iclientsidewebpartstatusrenderer": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "Render the provided error message in the webpart container div.",
        "remarks": null,
        "accessModifier": "",
        "signature": "renderError(domElement: HTMLElement, error: Error | string): void;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "void",
        "returnDescr": "",
        "params": [
          {
            "name": "domElement",
            "descr": "the webpart container div.",
            "isOptional": false,
            "dataType": "HTMLElement"
          },
          {
            "name": "error",
            "descr": "the error message.",
            "isOptional": false,
            "dataType": "Error | string"
          }
        ],
        "docName": "renderError(domElement,error)",
        "mdLink": "rendererrordomelementerror"
      }
    },
    "constructor": {},
    "types": {},
    "variables": {},
    "modules": {},
    "objects": {}
  },
  "IPlaceholderProps": {
    "isBeta": false,
    "implementsExtendsName": "",
    "genericType": "",
    "descr": "Used to display a placeholder in case of no or temporary content. Button is optional.",
    "remarks": null,
    "properties": {
      "buttonLabel": {
        "descr": "Text label to be displayed on button below the description. Optional: As the button is optional.",
        "remarks": null,
        "dataType": "string",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "contentClassName": {
        "descr": "This className is applied to the root element of content. Use this to apply custom styles to the placeholder.",
        "remarks": null,
        "dataType": "string",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "description": {
        "descr": "Text description for the placeholder. Appears bellow the Icon and IconText.",
        "remarks": null,
        "dataType": "string",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "icon": {
        "descr": "Icon className from the MDL2 set. Example: 'ms-Icon--Add'.",
        "remarks": null,
        "dataType": "string",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "iconText": {
        "descr": "Heading displayed against the Icon.",
        "remarks": null,
        "dataType": "string",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "onAdd": {
        "descr": "onClick handler for the button. Optional: As the button is optional.",
        "remarks": null,
        "dataType": "() => void",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      }
    },
    "functions": {},
    "methods": {},
    "constructor": {},
    "types": {},
    "variables": {},
    "modules": {},
    "objects": {}
  },
  "IPlaceholderSpinnerProps": {
    "isBeta": false,
    "implementsExtendsName": "",
    "genericType": "",
    "descr": "Interface for properties used to display the loading spinner in the web part display area.",
    "remarks": null,
    "properties": {
      "label": {
        "descr": "Label associated with the spinner.",
        "remarks": null,
        "dataType": "string",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      }
    },
    "functions": {},
    "methods": {},
    "constructor": {},
    "types": {},
    "variables": {},
    "modules": {},
    "objects": {}
  },
  "IPropertyPaneButtonProps": {
    "isBeta": false,
    "implementsExtendsName": "",
    "genericType": "",
    "descr": "PropertyPane button props.",
    "remarks": null,
    "properties": {
      "ariaDescription": {
        "descr": "Detailed description of the button for the benefit of screen readers. Besides the compound button, other button types will need more information provided to screen reader.",
        "remarks": null,
        "dataType": "string",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "ariaLabel": {
        "descr": "The aria label of the button for the benefit of screen readers.",
        "remarks": null,
        "dataType": "string",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "buttonType": {
        "descr": "The type of button to render. Default value is ButtonType.normal.",
        "remarks": null,
        "dataType": "PropertyPaneButtonType",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "description": {
        "descr": "Description of the action this button takes. Only used for compound buttons.",
        "remarks": null,
        "dataType": "string",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "disabled": {
        "descr": "Whether the button is disabled.",
        "remarks": null,
        "dataType": "boolean",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "icon": {
        "descr": "The button icon shown in command or hero type.",
        "remarks": null,
        "dataType": "string",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "onClick": {
        "descr": "A callback which is invoked on the button click, which takes in the existing value for the bound property and returns the new value and which is then used to update the properties bag. This update will result in the re-render of the PropertyPane with the new props.",
        "remarks": null,
        "dataType": "(value: any) => any",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "text": {
        "descr": "Display text of the element.",
        "remarks": null,
        "dataType": "string",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      }
    },
    "functions": {},
    "methods": {},
    "constructor": {},
    "types": {},
    "variables": {},
    "modules": {},
    "objects": {}
  },
  "IPropertyPaneCheckboxProps": {
    "isBeta": false,
    "implementsExtendsName": "",
    "genericType": "",
    "descr": "PropertyPane CheckBox component props.",
    "remarks": null,
    "properties": {
      "checked": {
        "descr": "Whether the property pane checkbox is checked or not. Default value is false.",
        "remarks": null,
        "dataType": "boolean",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "disabled": {
        "descr": "Whether the property pane checkbox is disabled or not.",
        "remarks": null,
        "dataType": "boolean",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "text": {
        "descr": "Label to display next to the checkbox.",
        "remarks": null,
        "dataType": "string",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      }
    },
    "functions": {},
    "methods": {},
    "constructor": {},
    "types": {},
    "variables": {},
    "modules": {},
    "objects": {}
  },
  "IPropertyPaneChoiceGroupOption": {
    "isBeta": false,
    "implementsExtendsName": "",
    "genericType": "",
    "descr": "PropertyPane ChoiceGroup option props.",
    "remarks": null,
    "properties": {
      "checked": {
        "descr": "Whether the property pane choicegroup option is checked or not. Default value is false.",
        "remarks": null,
        "dataType": "boolean",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "disabled": {
        "descr": "Whether the property pane choice group option is disabled or not.",
        "remarks": null,
        "dataType": "boolean",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "imageSize": {
        "descr": "The width and height of the image in px for choice field.",
        "remarks": null,
        "dataType": "{ width: number, height: number }",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "imageSrc": {
        "descr": "The src of image for choice field.",
        "remarks": null,
        "dataType": "string",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "key": {
        "descr": "A required key to uniquely identify the option.",
        "remarks": null,
        "dataType": "string | number",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "selectedImageSrc": {
        "descr": "The src of image for choice field which is selected.",
        "remarks": null,
        "dataType": "string",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "text": {
        "descr": "The text string for the option.",
        "remarks": null,
        "dataType": "string",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      }
    },
    "functions": {},
    "methods": {},
    "constructor": {},
    "types": {},
    "variables": {},
    "modules": {},
    "objects": {}
  },
  "IPropertyPaneChoiceGroupProps": {
    "isBeta": false,
    "implementsExtendsName": "",
    "genericType": "",
    "descr": "PropertyPane ChoiceGroup props.",
    "remarks": null,
    "properties": {
      "label": {
        "descr": "Descriptive label for the choice group.",
        "remarks": null,
        "dataType": "string",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "options": {
        "descr": "The options for the choice group.",
        "remarks": null,
        "dataType": "IPropertyPaneChoiceGroupOption[]",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      }
    },
    "functions": {},
    "methods": {},
    "constructor": {},
    "types": {},
    "variables": {},
    "modules": {},
    "objects": {}
  },
  "IPropertyPaneConfiguration": {
    "isBeta": false,
    "implementsExtendsName": "",
    "genericType": "",
    "descr": "Web part configuration settings",
    "remarks": null,
    "properties": {
      "currentPage": {
        "descr": "Page to be displayed on the PropertyPane.",
        "remarks": null,
        "dataType": "number",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "loadingIndicatorDelayTime": {
        "descr": "Number of milli seconds to be delayed before the loading indicator is shown on the property pane. default is 500.",
        "remarks": null,
        "dataType": "number",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "pages": {
        "descr": "Total number of pages on the PropertyPane.",
        "remarks": null,
        "dataType": "IPropertyPanePage[]",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "showLoadingIndicator": {
        "descr": "Indicates whether the loading indicator should be displayed on top of the property pane or not. This feature is intended to be used when the user is waiting on a promise to resolve. If set to true, overlay loading indicator appears after 500ms (web part author can override this behavior by using overlayLoadingIndicator property). The reason why we are not showing it immediately is that our intent is to never show the loading indicator. But in real life async requests could take long and it becomes necessary to display a loading indicator to the end user.",
        "remarks": null,
        "dataType": "boolean",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      }
    },
    "functions": {},
    "methods": {},
    "constructor": {},
    "types": {},
    "variables": {},
    "modules": {},
    "objects": {}
  },
  "IPropertyPaneCustomFieldProps": {
    "isBeta": false,
    "implementsExtendsName": "",
    "genericType": "",
    "descr": "PropertyPane CustomPropertyField props.",
    "remarks": null,
    "properties": {
      "context": {
        "descr": "Instance specific context. This context is passed back to the web part in the onRender and onDispose APIs. The web part can use this context to manage state information.",
        "remarks": null,
        "dataType": "any",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "key": {
        "descr": "An UNIQUE key indicates the identity of this contorl. The PropertyPane uses ReactJS to render its components. ReactJS uses keys to identify a component and if it should be re-rendered or not. This is a performance feature in ReactJS. Please read the following link to understand how to pick the value of the key.",
        "remarks": null,
        "dataType": "string",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "onDispose": {
        "descr": "This API is called when the component is unmounted from the host element.",
        "remarks": null,
        "dataType": "(domElement: HTMLElement, context?: any) => void",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "onRender": {
        "descr": "This API will be called once the custom field is mounted on the host element.",
        "remarks": null,
        "dataType": "(domElement: HTMLElement, context?: any) => void",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      }
    },
    "functions": {},
    "methods": {},
    "constructor": {},
    "types": {},
    "variables": {},
    "modules": {},
    "objects": {}
  },
  "IPropertyPaneDropdownOption": {
    "isBeta": false,
    "implementsExtendsName": "",
    "genericType": "",
    "descr": "PropertyPane drop down options.",
    "remarks": null,
    "properties": {
      "index": {
        "descr": "Index for this option.",
        "remarks": null,
        "dataType": "number",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "key": {
        "descr": "A key to uniquely identify this option.",
        "remarks": null,
        "dataType": "string | number",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "text": {
        "descr": "Text to render for this option.",
        "remarks": null,
        "dataType": "string",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      }
    },
    "functions": {},
    "methods": {},
    "constructor": {},
    "types": {},
    "variables": {},
    "modules": {},
    "objects": {}
  },
  "IPropertyPaneDropdownProps": {
    "isBeta": false,
    "implementsExtendsName": "",
    "genericType": "",
    "descr": "PropertyPane drop down component props.",
    "remarks": null,
    "properties": {
      "disabled": {
        "descr": "Whether the property pane dropdown option is disabled or not.",
        "remarks": null,
        "dataType": "boolean",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "label": {
        "descr": "Descriptive label for the Dropdown.",
        "remarks": null,
        "dataType": "string",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "options": {
        "descr": "Collection of options for this Dropdown.",
        "remarks": null,
        "dataType": "IPropertyPaneDropdownOption[]",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "selectedKey": {
        "descr": "The key of the initially selected option.",
        "remarks": null,
        "dataType": "string | number",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      }
    },
    "functions": {},
    "methods": {},
    "constructor": {},
    "types": {},
    "variables": {},
    "modules": {},
    "objects": {}
  },
  "IPropertyPaneField": {
    "isBeta": false,
    "implementsExtendsName": "",
    "genericType": "TProperties",
    "descr": "PropertyPane field.",
    "remarks": null,
    "properties": {
      "properties": {
        "descr": "Strongly typed properties object. Specific to each field type. Example: Checkbox has ICheckboxProps, TextField has ITextField props.",
        "remarks": null,
        "dataType": "TProperties",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "shouldFocus": {
        "descr": "Whether this control should be focused. default value is false.",
        "remarks": null,
        "dataType": "boolean",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "targetProperty": {
        "descr": "Target property from the web part's property bag.",
        "remarks": null,
        "dataType": "string",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "type": {
        "descr": "Type of the PropertyPane field.",
        "remarks": null,
        "dataType": "PropertyPaneFieldType",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      }
    },
    "functions": {},
    "methods": {},
    "constructor": {},
    "types": {},
    "variables": {},
    "modules": {},
    "objects": {}
  },
  "IPropertyPaneGroup": {
    "isBeta": false,
    "implementsExtendsName": "",
    "genericType": "",
    "descr": "PropertyPane group. Group is part of the PropertyPanePage.",
    "remarks": null,
    "properties": {
      "groupFields": {
        "descr": "List of PropertyPane fields.",
        "remarks": null,
        "dataType": "IPropertyPaneField<any>[]",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "groupName": {
        "descr": "Display name for the group.",
        "remarks": null,
        "dataType": "string",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      }
    },
    "functions": {},
    "methods": {},
    "constructor": {},
    "types": {},
    "variables": {},
    "modules": {},
    "objects": {}
  },
  "IPropertyPaneLabelProps": {
    "isBeta": false,
    "implementsExtendsName": "",
    "genericType": "",
    "descr": "PropertyPaneLabel component props.",
    "remarks": null,
    "properties": {
      "required": {
        "descr": "Whether the associated form field is required or not. If true, a red asterisk is displayed to the right of the label. Default value is false.",
        "remarks": null,
        "dataType": "boolean",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "text": {
        "descr": "Display text fot the label.",
        "remarks": null,
        "dataType": "string",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      }
    },
    "functions": {},
    "methods": {},
    "constructor": {},
    "types": {},
    "variables": {},
    "modules": {},
    "objects": {}
  },
  "IPropertyPaneLinkProps": {
    "isBeta": false,
    "implementsExtendsName": "",
    "genericType": "",
    "descr": "PropertyPaneLink component props.",
    "remarks": null,
    "properties": {
      "disabled": {
        "descr": "Whether the property pane link is disabled or not.",
        "remarks": null,
        "dataType": "boolean",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "href": {
        "descr": "Location to which the link is targetted to.",
        "remarks": null,
        "dataType": "string",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "popupWindowProps": {
        "descr": "The props of pop up window.",
        "remarks": null,
        "dataType": "IPopupWindowProps",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "target": {
        "descr": "This attribute specifies where to display the linked resource. Following values can be used: _self - (default) Load the response in the current page. _blank - Load the response into a new unnamed tab. _parent - Load the response in the parent of the current page. If no parent exists, then this option behaves same as '_self' _top - Load the response into the original window.",
        "remarks": null,
        "dataType": "string",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "text": {
        "descr": "Display text for the link.",
        "remarks": null,
        "dataType": "string",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      }
    },
    "functions": {},
    "methods": {},
    "constructor": {},
    "types": {},
    "variables": {},
    "modules": {},
    "objects": {}
  },
  "IPropertyPanePage": {
    "isBeta": false,
    "implementsExtendsName": "",
    "genericType": "",
    "descr": "PropertyPanePage interface.",
    "remarks": null,
    "properties": {
      "displayGroupsAsAccordion": {
        "descr": "Indicates whether the groups on the PropertyPanePage are displayed as accordion or not.",
        "remarks": null,
        "dataType": "boolean",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "groups": {
        "descr": "List of groups to be displayed on the PropertyPane page.",
        "remarks": null,
        "dataType": "IPropertyPaneGroup[]",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "header": {
        "descr": "PropertyPane page header.",
        "remarks": null,
        "dataType": "IPropertyPanePageHeader",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      }
    },
    "functions": {},
    "methods": {},
    "constructor": {},
    "types": {},
    "variables": {},
    "modules": {},
    "objects": {}
  },
  "IPropertyPanePageHeader": {
    "isBeta": false,
    "implementsExtendsName": "",
    "genericType": "",
    "descr": "PropertyPane header. This header remains same for all the pages.",
    "remarks": null,
    "properties": {
      "description": {
        "descr": "Header to display.",
        "remarks": null,
        "dataType": "string",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "image": {
        "descr": "Image url for the background image.",
        "remarks": null,
        "dataType": "string",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      }
    },
    "functions": {},
    "methods": {},
    "constructor": {},
    "types": {},
    "variables": {},
    "modules": {},
    "objects": {}
  },
  "IPropertyPaneSliderProps": {
    "isBeta": false,
    "implementsExtendsName": "",
    "genericType": "",
    "descr": "PropertyPaneSliderProps component props.",
    "remarks": null,
    "properties": {
      "ariaLabel": {
        "descr": "A description of the Slider for the benefit of screen readers.",
        "remarks": null,
        "dataType": "string",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "disabled": {
        "descr": "Whether or not the Slider is disabled.",
        "remarks": null,
        "dataType": "boolean",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "label": {
        "descr": "Description label of the Slider.",
        "remarks": null,
        "dataType": "string",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "max": {
        "descr": "The max value of the Slider.",
        "remarks": null,
        "dataType": "number",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "min": {
        "descr": "The min value of the Slider.",
        "remarks": null,
        "dataType": "number",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "showValue": {
        "descr": "Whether to show the value on the right of the Slider. If you want to show the value by yourself, you may want to set this value to false.",
        "remarks": null,
        "dataType": "boolean",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "step": {
        "descr": "The difference between the two adjacent values of the Slider. Defaults to 1.",
        "remarks": null,
        "dataType": "number",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "value": {
        "descr": "The initial value of the Slider. Use this if you intend to pass in a new value as a result of onChange events. Defaults to min.",
        "remarks": null,
        "dataType": "number",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      }
    },
    "functions": {},
    "methods": {},
    "constructor": {},
    "types": {},
    "variables": {},
    "modules": {},
    "objects": {}
  },
  "IPropertyPaneTextFieldProps": {
    "isBeta": false,
    "implementsExtendsName": "",
    "genericType": "",
    "descr": "PropertyPaneTextField component props.",
    "remarks": null,
    "properties": {
      "ariaLabel": {
        "descr": "Aria Label for textfield, if any.",
        "remarks": null,
        "dataType": "string",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "deferredValidationTime": {
        "descr": "Text field will start to validate after users stop typing for `deferredValidationTime` milliseconds. Default value is 200.",
        "remarks": null,
        "dataType": "number",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "description": {
        "descr": "The textfield input description.",
        "remarks": null,
        "dataType": "string",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "disabled": {
        "descr": "Whether the property pane textfield is enabled or not.",
        "remarks": null,
        "dataType": "boolean",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "errorMessage": {
        "descr": "Default value of the textfield, if any.",
        "remarks": null,
        "dataType": "string",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "label": {
        "descr": "Label for the textfield.",
        "remarks": null,
        "dataType": "string",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "multiline": {
        "descr": "Whether or not the textfield is a multiline textfield. Default value is false.",
        "remarks": null,
        "dataType": "boolean",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "onGetErrorMessage": {
        "descr": "The method is used to get the validation error message and determine whether the input value is valid or not. When it returns string: - If valid, it returns empty string. - If invalid, it returns the error message string and the text field will show a red border and show an error message below the text field. When it returns Promise<string>: - The resolved value is display as error message. - The rejected, the value is thrown away.",
        "remarks": null,
        "dataType": "(value: string) => string | Promise<string>",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "placeholder": {
        "descr": "placeholder text to be displayed in the Textfield.",
        "remarks": null,
        "dataType": "string",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "resizable": {
        "descr": "Whether or not the multiline textfield is resizable. Default value is true.",
        "remarks": null,
        "dataType": "boolean",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "underlined": {
        "descr": "Whether or not the textfield is underlined. Default value is false.",
        "remarks": null,
        "dataType": "boolean",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "value": {
        "descr": "Current value of the textfield. Only provide this if the textfield is a controlled component where you are maintaining its current state.",
        "remarks": null,
        "dataType": "string",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      }
    },
    "functions": {},
    "methods": {},
    "constructor": {},
    "types": {},
    "variables": {},
    "modules": {},
    "objects": {}
  },
  "IPropertyPaneToggleProps": {
    "isBeta": false,
    "implementsExtendsName": "",
    "genericType": "",
    "descr": "PropertyPaneToggle component props.",
    "remarks": null,
    "properties": {
      "checked": {
        "descr": "Checked state of the toggle. If you are maintaining state yourself, use this property.",
        "remarks": null,
        "dataType": "boolean",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "disabled": {
        "descr": "Optional disabled flag.",
        "remarks": null,
        "dataType": "boolean",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "key": {
        "descr": "A key to uniquely identify the field.",
        "remarks": null,
        "dataType": "string | number",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "label": {
        "descr": "A label for the toggle.",
        "remarks": null,
        "dataType": "string",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "offText": {
        "descr": "Test display when toggle is OFF.",
        "remarks": null,
        "dataType": "string",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "onText": {
        "descr": "Text to display when toggle is ON.",
        "remarks": null,
        "dataType": "string",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      }
    },
    "functions": {},
    "methods": {},
    "constructor": {},
    "types": {},
    "variables": {},
    "modules": {},
    "objects": {}
  },
  "ISerializedServerProcessedData": {
    "isBeta": false,
    "implementsExtendsName": "",
    "genericType": "",
    "descr": "Contains collections of data that can be processed by server side services like search index and link fixup",
    "remarks": null,
    "properties": {
      "htmlStrings": {
        "descr": "A key-value map where keys are string identifiers and values are rich text with HTML format. SharePoint servers treat the values as HTML content and run services like safety checks, search index and link fixup on them Example: { 'myRichDescription': '<div>Some standard <b>HTML content</b><a href='http://somelink'>A Link</a></div>' 'anotherRichText': <div class='aClass'><span style='color:red'>Some red text</div> }",
        "remarks": null,
        "dataType": "{ [key: string]: string }",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "imageSources": {
        "descr": "A key-value map where keys are string identifiers and values are image sources. SharePoint servers treat the values as image sources and run services like search index and link fixup on them Example: { 'myImage1': 'http://res.contoso.com/path/to/file' 'myImage2': 'https://res.contoso.com/someName.jpg' }",
        "remarks": null,
        "dataType": "{ [key: string]: string }",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "links": {
        "descr": "A key-value map where keys are string identifiers and values are links. SharePoint servers treat the values as links and run services like link fixup on them Example: { 'myWebURL': 'http://contoso.com' 'myFileLink': 'https://res.contoso.com/file.docx' }",
        "remarks": null,
        "dataType": "{ [key: string]: string }",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      }
    },
    "functions": {},
    "methods": {},
    "constructor": {},
    "types": {},
    "variables": {},
    "modules": {},
    "objects": {}
  },
  "ISerializedWebPartData": {
    "isBeta": false,
    "implementsExtendsName": "",
    "genericType": "",
    "descr": "This structure represents the part of the serialized state of a web part which is controlled by the web part. It is extended by IWebPartData which contains additional data added by the framework to the serialized data.",
    "remarks": null,
    "properties": {
      "dataVersion": {
        "descr": "Definition: Web part data version. Note that data version is different from the version field in the manifest. The manifest version is used to control the versioning of the web part code, while data version is used to control the versioning of the serialized data of the web part. Refer to dataVersion field of your web part for more information. Usage: versioning and evolving the serialized data of the web part Required: yes Type: Version Supported values: MAJOR.MINOR Example: \"1.0\"",
        "remarks": null,
        "dataType": "Version",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "properties": {
        "descr": "Definition: Web part specific properties. The individual web part owns the definition of these properties. Usage: used by the web part to manage its internal metadata and config data. The framework code never touches these properties. Required: yes Type: any Supported values: any JSON stringifiable object hierarchy. Example: { 'value': 'text value' }",
        "remarks": null,
        "dataType": "any",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "serverProcessedContent": {
        "descr": "Definition: The collections of data that can be processed by server side services like search index and link fixup Required: no",
        "remarks": null,
        "dataType": "ISerializedServerProcessedData",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      }
    },
    "functions": {},
    "methods": {},
    "constructor": {},
    "types": {},
    "variables": {},
    "modules": {},
    "objects": {}
  },
  "IWebPartContext": {
    "isBeta": false,
    "implementsExtendsName": "",
    "genericType": "",
    "descr": "The base context interface for client-side web parts.",
    "remarks": "A \"context\" object is a collection of well-known services and other objects that are likely to be needed by any business logic working with a component. Each component type has its own specialized extension of this interface, e.g. IWebPartContext for web parts, ICodePartContext for code parts, etc.",
    "properties": {
      "domElement": {
        "descr": "Reference to the DOM element that hosts this client side component.",
        "remarks": null,
        "dataType": "HTMLElement",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "httpClient": {
        "descr": "HttpClient instance scoped to this web part.",
        "remarks": null,
        "dataType": "HttpClient",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "instanceId": {
        "descr": "Web part instance id. This is a globally unique value.",
        "remarks": null,
        "dataType": "string",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "manifest": {
        "descr": "Manifest for the client side web part.",
        "remarks": null,
        "dataType": "IClientSideWebPartManifestInstance<any>",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "pageContext": {
        "descr": "SharePoint page context.",
        "remarks": null,
        "dataType": "PageContext",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "propertyPane": {
        "descr": "Accessor for common web part property pane operations.",
        "remarks": null,
        "dataType": "IPropertyPaneAccessor",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "spHttpClient": {
        "descr": "SPHttpClient instance scoped to this web part.",
        "remarks": null,
        "dataType": "SPHttpClient",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "statusRenderer": {
        "descr": "Web part status renderer.",
        "remarks": null,
        "dataType": "IClientSideWebPartStatusRenderer",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "webPartTag": {
        "descr": "Web part tag to be used for logging and telemetry.",
        "remarks": null,
        "dataType": "string",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      }
    },
    "functions": {},
    "methods": {},
    "constructor": {},
    "types": {},
    "variables": {},
    "modules": {},
    "objects": {}
  },
  "IWebPartData": {
    "isBeta": false,
    "implementsExtendsName": "",
    "genericType": "",
    "descr": "This structure represents the serialized state of a web part. When the serialize() API is called on a web part, the output should be this structure. The structure of the 'properties' field is owned by the web part and is specific to the web part. Each web part can decide the set of properties it wants to serialialize.",
    "remarks": null,
    "properties": {
      "description": {
        "descr": "Definition: web part description. Usage: display the description of the web part. Required: no Type: string Supported values: string with the description. Example: \"Text\"",
        "remarks": null,
        "dataType": "string",
        "isOptional": true,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "id": {
        "descr": "Definition: universally unique web part Type id. Usage: uniquely identify a web part. Required: yes Type: GUID Supported values: any GUID Example: \"dbef608d-3ad5-4f8f-b139-d916f2f0a294\"",
        "remarks": null,
        "dataType": "string",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "instanceId": {
        "descr": "Definition: universally unique instance id of the web part. A web part can have multiple instances on a page. This id is expected to be universally unique accross time and page boundaries. how used: used by the framework to uniquely identify an instance of a web part. mandatory: yes type: string supported values: a unique string. Could be GUID or other uniquely identifiable formats. example: [\"dbef608d-3ad5-4f8f-b139-d916f2f0a294\"] experimental: yes",
        "remarks": null,
        "dataType": "string",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "title": {
        "descr": "Definition: web part title. Usage: display the name of the web part in the toolbox, web part gallery and the page. Required: yes Type: string Supported values: string less than 100 characters Example: \"Text\"",
        "remarks": null,
        "dataType": "string",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      }
    },
    "functions": {},
    "methods": {},
    "constructor": {},
    "types": {},
    "variables": {},
    "modules": {},
    "objects": {}
  },
  "IWebPartPropertiesMetadata": {
    "isBeta": false,
    "implementsExtendsName": "",
    "genericType": "",
    "descr": "This structure is used to define metadata for web part propeties as a map of string to IWebPartPropertyMetadata The key should be a json path to the property in web part propeties. The json path supports the following operators: - Dot . for selecting object members e.g. person.name - Brackets [] for selecting array items e.g. person.photoURLs[0] - Bracketed asterisk [*] for array elements wildcard e.g. person.websites[*]. You can make combinations of these operators e.g. person.websites[*].url Important Note: Only one wildcard per path is supported. Example: Let's assume we have a web part with properties that have the following schema: { title: string; person: { name: string; bio: string; photoURLs: string[]; websites: { title: string; url: string; }[] } } We can define the metadata for the desired properties as following: { 'person.bio': { isRichContent: true }, 'person.photoURLs[*]': { isImageSource: true }, 'person.websites[*].url': { isLink: true } } This will make SharePoint servers aware of the content of your properties and run services such as search indexing, link fix-up, etc on the data. In case any of the values needs to update by these services, e.g link fix-up, the web part property bag is automatically updated.",
    "remarks": null,
    "properties": {},
    "functions": {},
    "methods": {
      "__index-iwebpartpropertiesmetadata": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "",
        "remarks": null,
        "accessModifier": "",
        "signature": "[ key: string ]: IWebPartPropertyMetadata;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "IWebPartPropertyMetadata",
        "returnDescr": "",
        "params": [],
        "docName": "index()",
        "mdLink": "index"
      }
    },
    "constructor": {},
    "types": {},
    "variables": {},
    "modules": {},
    "objects": {}
  }
}