{
  "GraphClientResponse": {
    "isBeta": false,
    "implementsExtendsName": "",
    "genericType": "",
    "descr": "The Response subclass returned by methods such as GraphHttpClient.fetch().",
    "remarks": "This is a placeholder. In the future, additional GraphHttpClient-specific functionality may be added to this class.",
    "properties": {},
    "functions": {},
    "methods": {
      "clone-graphclientresponse": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "",
        "remarks": null,
        "accessModifier": "public",
        "signature": "@override public clone(): GraphHttpClientResponse;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "GraphHttpClientResponse",
        "returnDescr": "",
        "params": [],
        "docName": "clone()",
        "mdLink": "clone"
      }
    },
    "constructor": {
      "isBeta": false,
      "showBetaMessage": false,
      "descr": "",
      "remarks": null,
      "signature": "public constructor(response: Response);",
      "genericType": null,
      "returnType": "",
      "returnDescr": "",
      "params": [],
      "docName": "constructor()",
      "mdLink": "constructor"
    },
    "types": {},
    "variables": {},
    "modules": {},
    "objects": {}
  },
  "GraphHttpClient": {
    "isBeta": false,
    "implementsExtendsName": "",
    "genericType": "",
    "descr": "GraphHttpClient is used to perform REST calls against Microsoft Graph. It adds default headers and collects telemetry that helps the service to monitor the performance of an application. https://developer.microsoft.com/en-us/graph/ For communicating with non-Graph services, use the HttpClient or SPHttpClient class instead.",
    "remarks": null,
    "properties": {
      "configurations": {
        "descr": "The standard predefined GraphHttpClientConfiguration objects for use with the GraphHttpClient class.",
        "remarks": null,
        "dataType": "IGraphHttpClientConfigurations",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "serviceKey": {
        "descr": "The service key for GraphHttpClient.",
        "remarks": null,
        "dataType": "ServiceKey<GraphHttpClient>",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      }
    },
    "functions": {},
    "methods": {
      "fetch-graphhttpclient": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "Generally, the parameters and semantics for HttpClient.fetch() are essentially the same as the WHATWG API standard that is documented here: https://fetch.spec.whatwg.org/ The GraphHttpClient subclass adds some additional behaviors that are convenient when working with SharePoint ODATA API's (which can be avoided by using HttpClient instead): - Default \"Accept\" and \"Content-Type\" headers are added if not explicitly specified.",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public fetch(url: string,\r\n    configuration: GraphHttpClientConfiguration,\r\n    options: IGraphHttpClientOptions): Promise<GraphHttpClientResponse>;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "Promise<GraphHttpClientResponse>",
        "returnDescr": "a promise that will return the result",
        "params": [
          {
            "name": "url",
            "descr": "The url string should be relative to the graph server. Good: 'v1.0/me/events' Bad: '/v1.0/me/events', 'https://graph.microsoft.com/v1.0/me/events'",
            "isOptional": false,
            "dataType": "string"
          },
          {
            "name": "configuration",
            "descr": "determines the default behavior of GraphHttpClient; normally this should be the latest version number from GraphHttpClientConfigurations",
            "isOptional": false,
            "dataType": "GraphHttpClientConfiguration"
          },
          {
            "name": "options",
            "descr": "additional options that affect the request",
            "isOptional": false,
            "dataType": "IGraphHttpClientOptions"
          }
        ],
        "docName": "fetch(url,configuration,options)",
        "mdLink": "fetchurlconfigurationoptions"
      },
      "get-graphhttpclient": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "Calls fetch(), but sets the method to 'GET'.",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public get(url: string, configuration: GraphHttpClientConfiguration,\r\n    options?: IGraphHttpClientOptions): Promise<GraphHttpClientResponse>;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "Promise<GraphHttpClientResponse>",
        "returnDescr": "a promise that will return the result",
        "params": [
          {
            "name": "url",
            "descr": "the URL to fetch",
            "isOptional": false,
            "dataType": "string"
          },
          {
            "name": "configuration",
            "descr": "determines the default behavior of GraphHttpClient; normally this should be the latest version number from GraphHttpClientConfigurations",
            "isOptional": false,
            "dataType": "GraphHttpClientConfiguration"
          },
          {
            "name": "options",
            "descr": "additional options that affect the request",
            "isOptional": true,
            "dataType": "IGraphHttpClientOptions"
          }
        ],
        "docName": "get(url,configuration,options)",
        "mdLink": "geturlconfigurationoptions"
      },
      "post-graphhttpclient": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "Calls fetch(), but sets the method to 'POST'.",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public post(url: string, configuration: GraphHttpClientConfiguration,\r\n    options: IGraphHttpClientOptions): Promise<GraphHttpClientResponse>;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "Promise<GraphHttpClientResponse>",
        "returnDescr": "a promise that will return the result",
        "params": [
          {
            "name": "url",
            "descr": "the URL to fetch",
            "isOptional": false,
            "dataType": "string"
          },
          {
            "name": "configuration",
            "descr": "determines the default behavior of GraphHttpClient; normally this should be the latest version number from GraphHttpClientConfigurations",
            "isOptional": false,
            "dataType": "GraphHttpClientConfiguration"
          },
          {
            "name": "options",
            "descr": "additional options that affect the request",
            "isOptional": false,
            "dataType": "IGraphHttpClientOptions"
          }
        ],
        "docName": "post(url,configuration,options)",
        "mdLink": "posturlconfigurationoptions"
      }
    },
    "constructor": {
      "isBeta": false,
      "showBetaMessage": false,
      "descr": "",
      "remarks": null,
      "signature": "constructor(serviceScope: ServiceScope);",
      "genericType": null,
      "returnType": "",
      "returnDescr": "",
      "params": [],
      "docName": "constructor()",
      "mdLink": "constructor"
    },
    "types": {},
    "variables": {},
    "modules": {},
    "objects": {}
  },
  "GraphHttpClientConfiguration": {
    "isBeta": false,
    "implementsExtendsName": "IGraphHttpClientConfiguration",
    "genericType": "",
    "descr": "The GraphHttpClientConfiguration object provides a set of switches for enabling/disabling various features of the GraphHttpClient class. Normally these switches are set (e.g. when calling GraphHttpClient.fetch()) by providing one of the predefined defaults from GraphHttpClientConfigurations, however switches can also be changed via the GraphHttpClientConfiguration.overrideWith() method.",
    "remarks": null,
    "properties": {
      "flags": {
        "descr": "",
        "remarks": null,
        "dataType": "IGraphHttpClientConfiguration",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      }
    },
    "functions": {},
    "methods": {},
    "constructor": {
      "isBeta": false,
      "showBetaMessage": false,
      "descr": "Constructs a new instance of GraphHttpClientCommonConfiguration with the specified flags. The default values will be used for any flags that are missing or undefined. If overrideFlags is specified, it takes precedence over flags.",
      "remarks": null,
      "signature": "constructor(flags: IGraphHttpClientConfiguration, overrideFlags?: IGraphHttpClientConfiguration);",
      "genericType": null,
      "returnType": "",
      "returnDescr": "",
      "params": [],
      "docName": "constructor()",
      "mdLink": "constructor"
    },
    "types": {},
    "variables": {},
    "modules": {},
    "objects": {}
  },
  "HttpClient": {
    "isBeta": false,
    "implementsExtendsName": "",
    "genericType": "",
    "descr": "HttpClient implements a basic set of features for performing REST operations. The subclass SPHttpClient extends this basic functionality with SharePoint-specific enhancements.",
    "remarks": null,
    "properties": {
      "configurations": {
        "descr": "The standard predefined HttpClientConfiguration objects for use with the HttpClient class.",
        "remarks": null,
        "dataType": "IHttpClientConfigurations",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "serviceKey": {
        "descr": "The service key for HttpClient.",
        "remarks": null,
        "dataType": "ServiceKey<HttpClient>",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      }
    },
    "functions": {},
    "methods": {
      "fetch-httpclient": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "Performs a REST service call. Although the SPHttpClient subclass adds additional enhancements, the parameters and semantics for HttpClient.fetch() are essentially the same as the WHATWG API standard that is documented here: https://fetch.spec.whatwg.org/",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public fetch(url: string, configuration: HttpClientConfiguration,\r\n    options: IHttpClientOptions): Promise<HttpClientResponse>;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "Promise<HttpClientResponse>",
        "returnDescr": "a promise that will return the result",
        "params": [
          {
            "name": "url",
            "descr": "the URL to fetch",
            "isOptional": false,
            "dataType": "string"
          },
          {
            "name": "configuration",
            "descr": "determines the default behavior of HttpClient; normally this should be the latest version number from HttpClientConfigurations",
            "isOptional": false,
            "dataType": "HttpClientConfiguration"
          },
          {
            "name": "options",
            "descr": "additional options that affect the request",
            "isOptional": false,
            "dataType": "IHttpClientOptions"
          }
        ],
        "docName": "fetch(url,configuration,options)",
        "mdLink": "fetchurlconfigurationoptions"
      },
      "get-httpclient": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "Calls fetch(), but sets the method to 'GET'.",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public get(url: string, configuration: HttpClientConfiguration,\r\n    options?: IHttpClientOptions): Promise<HttpClientResponse>;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "Promise<HttpClientResponse>",
        "returnDescr": "a promise that will return the result",
        "params": [
          {
            "name": "url",
            "descr": "the URL to fetch",
            "isOptional": false,
            "dataType": "string"
          },
          {
            "name": "configuration",
            "descr": "determines the default behavior of HttpClient; normally this should be the latest version number from HttpClientConfigurations",
            "isOptional": false,
            "dataType": "HttpClientConfiguration"
          },
          {
            "name": "options",
            "descr": "additional options that affect the request",
            "isOptional": true,
            "dataType": "IHttpClientOptions"
          }
        ],
        "docName": "get(url,configuration,options)",
        "mdLink": "geturlconfigurationoptions"
      },
      "post-httpclient": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "Calls fetch(), but sets the method to 'POST'.",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public post(url: string, configuration: HttpClientConfiguration,\r\n    options: IHttpClientOptions): Promise<HttpClientResponse>;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "Promise<HttpClientResponse>",
        "returnDescr": "a promise that will return the result",
        "params": [
          {
            "name": "url",
            "descr": "the URL to fetch",
            "isOptional": false,
            "dataType": "string"
          },
          {
            "name": "configuration",
            "descr": "determines the default behavior of HttpClient; normally this should be the latest version number from HttpClientConfigurations",
            "isOptional": false,
            "dataType": "HttpClientConfiguration"
          },
          {
            "name": "options",
            "descr": "additional options that affect the request",
            "isOptional": false,
            "dataType": "IHttpClientOptions"
          }
        ],
        "docName": "post(url,configuration,options)",
        "mdLink": "posturlconfigurationoptions"
      }
    },
    "constructor": {
      "isBeta": false,
      "showBetaMessage": false,
      "descr": "",
      "remarks": null,
      "signature": "constructor(serviceScope: ServiceScope);",
      "genericType": null,
      "returnType": "",
      "returnDescr": "",
      "params": [],
      "docName": "constructor()",
      "mdLink": "constructor"
    },
    "types": {},
    "variables": {},
    "modules": {},
    "objects": {}
  },
  "HttpClientConfiguration": {
    "isBeta": false,
    "implementsExtendsName": "IHttpClientConfiguration",
    "genericType": "",
    "descr": "The HttpClientConfiguration object provides a set of switches for enabling/disabling various features of the HttpClient class. Normally these switches are set (e.g. when calling HttpClient.fetch()) by providing one of the predefined defaults from HttpClientConfigurations, however switches can also be changed via the HttpClientConfiguration.overrideWith() method.",
    "remarks": null,
    "properties": {
      "flags": {
        "descr": "",
        "remarks": null,
        "dataType": "IHttpClientConfiguration",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      }
    },
    "functions": {},
    "methods": {
      "initializeFlags-httpclientconfiguration": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "Child classes should override this method to initialize the flags object.",
        "remarks": null,
        "accessModifier": "protected",
        "signature": "@virtual protected initializeFlags(): void;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "void",
        "returnDescr": "",
        "params": [],
        "docName": "initializeFlags()",
        "mdLink": "initializeflags"
      },
      "overrideWith-httpclientconfiguration": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "Child classes should override this method to construct the child class type, rather than the base class type.",
        "remarks": null,
        "accessModifier": "public",
        "signature": "@virtual public overrideWith(sourceFlags: IHttpClientConfiguration): HttpClientConfiguration;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "HttpClientConfiguration",
        "returnDescr": "",
        "params": [],
        "docName": "overrideWith()",
        "mdLink": "overridewith"
      }
    },
    "constructor": {
      "isBeta": false,
      "showBetaMessage": false,
      "descr": "Constructs a new instance of HttpClientConfiguration with the specified flags. The default values will be used for any flags that are missing or undefined. If overrideFlags is specified, it takes precedence over flags. *",
      "remarks": null,
      "signature": "constructor(flags: IHttpClientConfiguration, overrideFlags?: IHttpClientConfiguration);",
      "genericType": null,
      "returnType": "",
      "returnDescr": "",
      "params": [],
      "docName": "constructor()",
      "mdLink": "constructor"
    },
    "types": {},
    "variables": {},
    "modules": {},
    "objects": {}
  },
  "HttpClientResponse": {
    "isBeta": false,
    "implementsExtendsName": "Response",
    "genericType": "",
    "descr": "The Response subclass returned by methods such as HttpClient.fetch().",
    "remarks": "This is a placeholder. In the future, additional HttpClient-specific functionality may be added to this class.",
    "properties": {
      "bodyUsed": {
        "descr": "",
        "remarks": null,
        "dataType": "boolean",
        "isOptional": false,
        "readonly": true,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "headers": {
        "descr": "",
        "remarks": null,
        "dataType": "Headers",
        "isOptional": false,
        "readonly": true,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "nativeResponse": {
        "descr": "",
        "remarks": null,
        "dataType": "Response",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "ok": {
        "descr": "",
        "remarks": null,
        "dataType": "boolean",
        "isOptional": false,
        "readonly": true,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "status": {
        "descr": "",
        "remarks": null,
        "dataType": "number",
        "isOptional": false,
        "readonly": true,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "statusText": {
        "descr": "",
        "remarks": null,
        "dataType": "string",
        "isOptional": false,
        "readonly": true,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "type": {
        "descr": "",
        "remarks": null,
        "dataType": "ResponseType",
        "isOptional": false,
        "readonly": true,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "url": {
        "descr": "",
        "remarks": null,
        "dataType": "string",
        "isOptional": false,
        "readonly": true,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      }
    },
    "functions": {},
    "methods": {
      "arrayBuffer-httpclientresponse": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public arrayBuffer(): Promise<ArrayBuffer>;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "Promise<ArrayBuffer>",
        "returnDescr": "",
        "params": [],
        "docName": "arrayBuffer()",
        "mdLink": "arraybuffer"
      },
      "blob-httpclientresponse": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public blob(): Promise<Blob>;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "Promise<Blob>",
        "returnDescr": "",
        "params": [],
        "docName": "blob()",
        "mdLink": "blob"
      },
      "clone-httpclientresponse": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "",
        "remarks": null,
        "accessModifier": "public",
        "signature": "@virtual public clone(): HttpClientResponse;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "HttpClientResponse",
        "returnDescr": "",
        "params": [],
        "docName": "clone()",
        "mdLink": "clone"
      },
      "formData-httpclientresponse": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public formData(): Promise<FormData>;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "Promise<FormData>",
        "returnDescr": "",
        "params": [],
        "docName": "formData()",
        "mdLink": "formdata"
      },
      "json-httpclientresponse": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public json(): Promise<any>;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "Promise<any>",
        "returnDescr": "",
        "params": [],
        "docName": "json()",
        "mdLink": "json"
      },
      "text-httpclientresponse": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public text(): Promise<string>;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "Promise<string>",
        "returnDescr": "",
        "params": [],
        "docName": "text()",
        "mdLink": "text"
      }
    },
    "constructor": {},
    "types": {},
    "variables": {},
    "modules": {},
    "objects": {}
  },
  "ODataVersion": {
    "isBeta": false,
    "implementsExtendsName": "",
    "genericType": "",
    "descr": "Represents supported version of the 'OData-Version' header, which is part of the Open Data Protocol standard.",
    "remarks": null,
    "properties": {
      "v3": {
        "descr": "Represents version 3.0 for the 'OData-Version' header",
        "remarks": null,
        "dataType": "ODataVersion",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "v4": {
        "descr": "Represents version 4.0 for the 'OData-Version' header",
        "remarks": null,
        "dataType": "ODataVersion",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      }
    },
    "functions": {},
    "methods": {
      "toString-odataversion": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "Returns the 'OData-Version' value, for example '4.0'.",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public toString(): string;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "string",
        "returnDescr": "",
        "params": [],
        "docName": "toString()",
        "mdLink": "tostring"
      },
      "tryParseFromHeaders-odataversion": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "If the 'OData-Version' header is present, this returns the corresponding ODataVersion constant. An error is thrown if the version number is not supported. If the header is missing, then undefined is returned.",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public static tryParseFromHeaders(headers: Headers): ODataVersion | undefined;",
        "isStatic": true,
        "isOptional": false,
        "genericType": null,
        "returnType": "ODataVersion | undefined",
        "returnDescr": "",
        "params": [],
        "docName": "tryParseFromHeaders()",
        "mdLink": "tryparsefromheaders"
      }
    },
    "constructor": {},
    "types": {},
    "variables": {},
    "modules": {},
    "objects": {}
  },
  "SPHttpClient": {
    "isBeta": false,
    "implementsExtendsName": "",
    "genericType": "",
    "descr": "SPHttpClient is used to perform REST calls against SharePoint. It adds default headers, manages the digest needed for writes, and collects telemetry that helps the service to monitor the performance of an application. For communicating with non-SharePoint services, use the HttpClient class instead.",
    "remarks": null,
    "properties": {
      "configurations": {
        "descr": "The standard predefined SPHttpClientConfiguration objects for use with the SPHttpClient class.",
        "remarks": null,
        "dataType": "ISPHttpClientConfigurations",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "serviceKey": {
        "descr": "The service key for SPHttpClient.",
        "remarks": null,
        "dataType": "ServiceKey<SPHttpClient>",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      }
    },
    "functions": {},
    "methods": {
      "beginBatch-sphttpclient": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "Begins an ODATA batch, which allows multiple REST queries to be bundled into a single web request.",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public beginBatch(batchCreationOptions?: ISPHttpClientBatchCreationOptions): SPHttpClientBatch;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "SPHttpClientBatch",
        "returnDescr": "a promise that will return the result",
        "params": [],
        "docName": "beginBatch()",
        "mdLink": "beginbatch"
      },
      "fetch-sphttpclient": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "Generally, the parameters and semantics for SPHttpClient.fetch() are essentially the same as the WHATWG API standard that is documented here: https://fetch.spec.whatwg.org/ The SPHttpClient subclass adds some additional behaviors that are convenient when working with SharePoint ODATA API's (which can be avoided by using HttpClient instead): - Default \"Accept\" and \"Content-Type\" headers are added if not explicitly specified. - For write operations, an \"X-RequestDigest\" header is automatically added - The request digest token is automatically fetched and stored in a cache, with support for preloading For a write operation, SPHttpClient will automatically add the \"X-RequestDigest\" header, which may need to be obtained by issuing a seperate request such as \"https://example.com/sites/sample/_api/contextinfo\". Typically the appropriate SPWeb URL can be guessed by looking for a reserved URL segment such as \"_api\" in the original URL passed to fetch(); if not, use ISPHttpClientOptions.webUrl to specify it explicitly.",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public fetch(url: string, configuration: SPHttpClientConfiguration,\r\n    options: ISPHttpClientOptions): Promise<SPHttpClientResponse>;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "Promise<SPHttpClientResponse>",
        "returnDescr": "a promise that will return the result",
        "params": [
          {
            "name": "url",
            "descr": "the URL to fetch",
            "isOptional": false,
            "dataType": "string"
          },
          {
            "name": "configuration",
            "descr": "determines the default behavior of SPHttpClient; normally this should be the latest version number from SPHttpClientConfigurations",
            "isOptional": false,
            "dataType": "SPHttpClientConfiguration"
          },
          {
            "name": "options",
            "descr": "additional options that affect the request",
            "isOptional": false,
            "dataType": "ISPHttpClientOptions"
          }
        ],
        "docName": "fetch(url,configuration,options)",
        "mdLink": "fetchurlconfigurationoptions"
      },
      "get-sphttpclient": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "Calls fetch(), but sets the method to 'GET'.",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public get(url: string, configuration: SPHttpClientConfiguration,\r\n    options?: ISPHttpClientOptions): Promise<SPHttpClientResponse>;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "Promise<SPHttpClientResponse>",
        "returnDescr": "a promise that will return the result",
        "params": [
          {
            "name": "url",
            "descr": "the URL to fetch",
            "isOptional": false,
            "dataType": "string"
          },
          {
            "name": "configuration",
            "descr": "determines the default behavior of SPHttpClient; normally this should be the latest version number from SPHttpClientConfigurations",
            "isOptional": false,
            "dataType": "SPHttpClientConfiguration"
          },
          {
            "name": "options",
            "descr": "additional options that affect the request",
            "isOptional": true,
            "dataType": "ISPHttpClientOptions"
          }
        ],
        "docName": "get(url,configuration,options)",
        "mdLink": "geturlconfigurationoptions"
      },
      "getWebUrlFromRequestUrl-sphttpclient": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "This uses a heuristic to guess the SPWeb URL associated with the provided REST URL. This is necessary for operations such as the X-RequestDigest and ODATA batching, which require POSTing to a separate REST endpoint in order to complete a request. For excample, if the requestUrl is \"/sites/site/web/_api/service\", the returned URL would be \"/sites/site/web\". Or if the requestUrl is \"http://example.com/_layouts/service\", the returned URL would be \"http://example.com\".",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public static getWebUrlFromRequestUrl(requestUrl: string): string;",
        "isStatic": true,
        "isOptional": false,
        "genericType": null,
        "returnType": "string",
        "returnDescr": "the inferred SPWeb URL",
        "params": [
          {
            "name": "requestUrl",
            "descr": "The URL for a SharePoint REST service",
            "isOptional": false,
            "dataType": "string"
          }
        ],
        "docName": "getWebUrlFromRequestUrl(requestUrl)",
        "mdLink": "getweburlfromrequesturlrequesturl"
      },
      "post-sphttpclient": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "Calls fetch(), but sets the method to 'POST'.",
        "remarks": null,
        "accessModifier": "public",
        "signature": "public post(url: string, configuration: SPHttpClientConfiguration,\r\n    options: ISPHttpClientOptions): Promise<SPHttpClientResponse>;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "Promise<SPHttpClientResponse>",
        "returnDescr": "a promise that will return the result",
        "params": [
          {
            "name": "url",
            "descr": "the URL to fetch",
            "isOptional": false,
            "dataType": "string"
          },
          {
            "name": "configuration",
            "descr": "determines the default behavior of SPHttpClient; normally this should be the latest version number from SPHttpClientConfigurations",
            "isOptional": false,
            "dataType": "SPHttpClientConfiguration"
          },
          {
            "name": "options",
            "descr": "additional options that affect the request",
            "isOptional": false,
            "dataType": "ISPHttpClientOptions"
          }
        ],
        "docName": "post(url,configuration,options)",
        "mdLink": "posturlconfigurationoptions"
      }
    },
    "constructor": {
      "isBeta": false,
      "showBetaMessage": false,
      "descr": "",
      "remarks": null,
      "signature": "constructor(serviceScope: ServiceScope);",
      "genericType": null,
      "returnType": "",
      "returnDescr": "",
      "params": [],
      "docName": "constructor()",
      "mdLink": "constructor"
    },
    "types": {},
    "variables": {},
    "modules": {},
    "objects": {}
  },
  "SPHttpClientCommonConfiguration": {
    "isBeta": false,
    "implementsExtendsName": "ISPHttpClientCommonConfiguration",
    "genericType": "",
    "descr": "Common base class for SPHttpClientConfiguration and SPHttpClientBatchConfiguration.",
    "remarks": null,
    "properties": {
      "flags": {
        "descr": "",
        "remarks": null,
        "dataType": "ISPHttpClientCommonConfiguration",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "jsonRequest": {
        "descr": "When this switch is true: If the 'Content-Type' header was not explicitly added for the request, then SPHttpClient will add it if the request is a write operation (i.e. an HTTP method other than 'GET', 'HEAD', or 'OPTIONS'). For OData 3.0, the value is 'application/json;odata=verbose;charset=utf-8'. For OData 4.0, the value is 'application/json;charset=utf-8'.",
        "remarks": null,
        "dataType": "boolean",
        "isOptional": false,
        "readonly": true,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "jsonResponse": {
        "descr": "When this switch is true: If the 'Accept' header was not explicitly added for the request, then SPHttpClient will add it. For OData 3.0, the value is 'application/json'. For OData 4.0, the value is 'application/json;odata.metadata=minimal'.",
        "remarks": null,
        "dataType": "boolean",
        "isOptional": false,
        "readonly": true,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      }
    },
    "functions": {},
    "methods": {
      "initializeFlags-sphttpclientcommonconfiguration": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "",
        "remarks": null,
        "accessModifier": "protected",
        "signature": "@override protected initializeFlags(): void;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "void",
        "returnDescr": "",
        "params": [],
        "docName": "initializeFlags()",
        "mdLink": "initializeflags"
      },
      "overrideWith-sphttpclientcommonconfiguration": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "",
        "remarks": null,
        "accessModifier": "public",
        "signature": "@override public overrideWith(sourceFlags: ISPHttpClientCommonConfiguration): SPHttpClientCommonConfiguration;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "SPHttpClientCommonConfiguration",
        "returnDescr": "",
        "params": [],
        "docName": "overrideWith()",
        "mdLink": "overridewith"
      }
    },
    "constructor": {
      "isBeta": false,
      "showBetaMessage": false,
      "descr": "Constructs a new instance of SPHttpClientCommonConfiguration with the specified flags. The default values will be used for any flags that are missing or undefined. If overrideFlags is specified, it takes precedence over flags.",
      "remarks": null,
      "signature": "constructor(flags: ISPHttpClientCommonConfiguration, overrideFlags?: ISPHttpClientCommonConfiguration);",
      "genericType": null,
      "returnType": "",
      "returnDescr": "",
      "params": [],
      "docName": "constructor()",
      "mdLink": "constructor"
    },
    "types": {},
    "variables": {},
    "modules": {},
    "objects": {}
  },
  "SPHttpClientConfiguration": {
    "isBeta": false,
    "implementsExtendsName": "ISPHttpClientConfiguration",
    "genericType": "",
    "descr": "The SPHttpClientConfiguration object provides a set of switches for enabling/disabling various features of the SPHttpClient class. Normally these switches are set (e.g. when calling SPHttpClient.fetch()) by providing one of the predefined defaults from SPHttpClientConfigurations, however switches can also be changed via the SPHttpClientConfiguration.overrideWith() method.",
    "remarks": null,
    "properties": {
      "defaultODataVersion": {
        "descr": "When this switch is specified (i.e. not undefined): If the 'OData-Version' header was not explictly added for the request, then SPHttpClient will add the header to specify the version indicated by defaultODataVersion. NOTE: Without an 'OData-Version' header, the SharePoint server currently defaults to Version 3.0 in most cases. The recommended version is 4.0.",
        "remarks": null,
        "dataType": "ODataVersion",
        "isOptional": false,
        "readonly": true,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "defaultSameOriginCredentials": {
        "descr": "When this switch is true: If RequestInit.credentials is not explicitly specified for the request, then SPHttpClient will assign it to be 'same-origin'. Without this switch, different web browsers may apply different defaults. For more information, see the spec: https://fetch.spec.whatwg.org/#cors-protocol-and-credentials",
        "remarks": null,
        "dataType": "boolean",
        "isOptional": false,
        "readonly": true,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "flags": {
        "descr": "",
        "remarks": null,
        "dataType": "ISPHttpClientConfiguration",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "requestDigest": {
        "descr": "When this switch is true: If the 'X-RequestDigest' header was not explicitly added for the request, then SPHttpClient will add it if the request is a write operation (i.e. an HTTP method other than 'GET', 'HEAD', or 'OPTIONS'). The request digest is managed by the DigestCache service. In the case of a cache miss, an additional network request may be performed.",
        "remarks": null,
        "dataType": "boolean",
        "isOptional": false,
        "readonly": true,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      }
    },
    "functions": {},
    "methods": {
      "initializeFlags-sphttpclientconfiguration": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "",
        "remarks": null,
        "accessModifier": "protected",
        "signature": "@override protected initializeFlags(): void;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "void",
        "returnDescr": "",
        "params": [],
        "docName": "initializeFlags()",
        "mdLink": "initializeflags"
      },
      "overrideWith-sphttpclientconfiguration": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "",
        "remarks": null,
        "accessModifier": "public",
        "signature": "@override public overrideWith(sourceFlags: ISPHttpClientConfiguration): SPHttpClientConfiguration;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "SPHttpClientConfiguration",
        "returnDescr": "",
        "params": [],
        "docName": "overrideWith()",
        "mdLink": "overridewith"
      }
    },
    "constructor": {
      "isBeta": false,
      "showBetaMessage": false,
      "descr": "Constructs a new instance of SPHttpClientConfiguration with the specified flags. The default values will be used for any flags that are missing or undefined. If overrideFlags is specified, it takes precedence over flags.",
      "remarks": null,
      "signature": "constructor(flags: ISPHttpClientConfiguration, overrideFlags?: ISPHttpClientConfiguration);",
      "genericType": null,
      "returnType": "",
      "returnDescr": "",
      "params": [],
      "docName": "constructor()",
      "mdLink": "constructor"
    },
    "types": {},
    "variables": {},
    "modules": {},
    "objects": {}
  },
  "SPHttpClientResponse": {
    "isBeta": false,
    "implementsExtendsName": "",
    "genericType": "",
    "descr": "The Response subclass returned by methods such as SPHttpClient.fetch().",
    "remarks": "This is a placeholder. In the future, additional SPHttpClient-specific functionality may be added to this class.",
    "properties": {},
    "functions": {},
    "methods": {
      "clone-sphttpclientresponse": {
        "isBeta": false,
        "showBetaMessage": false,
        "descr": "",
        "remarks": null,
        "accessModifier": "public",
        "signature": "@override public clone(): SPHttpClientResponse;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "SPHttpClientResponse",
        "returnDescr": "",
        "params": [],
        "docName": "clone()",
        "mdLink": "clone"
      }
    },
    "constructor": {
      "isBeta": false,
      "showBetaMessage": false,
      "descr": "",
      "remarks": null,
      "signature": "public constructor(response: Response);",
      "genericType": null,
      "returnType": "",
      "returnDescr": "",
      "params": [],
      "docName": "constructor()",
      "mdLink": "constructor"
    },
    "types": {},
    "variables": {},
    "modules": {},
    "objects": {}
  }
}