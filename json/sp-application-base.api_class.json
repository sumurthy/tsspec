{
  "ApplicationCustomizerContext": {
    "isBeta": true,
    "implementsExtendsName": "",
    "genericType": "",
    "descr": "This object provides contextual information for BaseApplicationCustomizer.",
    "remarks": null,
    "properties": {
      "pageContext": {
        "descr": "The page context provides standard definitions for common SharePoint objects that need to be shared between the client-side application, web parts, and other components.",
        "remarks": null,
        "dataType": "PageContext",
        "isOptional": false,
        "readonly": true,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "placeholders": {
        "descr": "Exposes a collection of content placeholders for use by third parties.",
        "remarks": null,
        "dataType": "PlaceholderCollection",
        "isOptional": false,
        "readonly": true,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      }
    },
    "functions": {},
    "methods": {},
    "constructor": {},
    "types": {},
    "variables": {},
    "modules": {},
    "objects": {}
  },
  "BaseApplicationCustomizer": {
    "isBeta": true,
    "implementsExtendsName": "",
    "genericType": "TProperties",
    "descr": "This is the base class that third parties should extend when implementing a client-side extension that runs when an application is first starting. In the component manifest, the \"extensionType\" should be set to \"ApplicationCustomizer\".",
    "remarks": null,
    "properties": {
      "context": {
        "descr": "Use context object to access common services and state associated with the component.",
        "remarks": "Child classes are expected to override this field by redeclaring it with a specialized type. It is meant to be a read-only property; the type cannot be declared as read-only in the base class (because it is initialized outside the constructor), but child classes should redeclare it as readonly.",
        "dataType": "ApplicationCustomizerContext",
        "isOptional": false,
        "readonly": false,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      }
    },
    "functions": {},
    "methods": {
      "onRender-baseapplicationcustomizer": {
        "isBeta": false,
        "showBetaMessage": true,
        "descr": "This lifecycle event occurs after the shell has constructed the initial page DOM, after the application's onRender() event has occurred.",
        "remarks": null,
        "accessModifier": "public",
        "signature": "@virtual public onRender(): void;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "void",
        "returnDescr": "",
        "params": [],
        "docName": "onRender()",
        "mdLink": "onrender"
      }
    },
    "constructor": {},
    "types": {},
    "variables": {},
    "modules": {},
    "objects": {}
  },
  "Placeholder": {
    "isBeta": true,
    "implementsExtendsName": "",
    "genericType": "",
    "descr": "A content placeholder is a designated region on the page (i.e. empty HTML \"div\" element) where third party extensions can inject HTML content.",
    "remarks": null,
    "properties": {
      "domElement": {
        "descr": "The HTML element on which the placeholder will be attached. This property is undefined if PlaceHolderCollection.tryAttach() was not been called, or if dispose() was called after the last call to PlaceHolderCollection.tryAttach().",
        "remarks": null,
        "dataType": "HTMLDivElement",
        "isOptional": false,
        "readonly": true,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      },
      "name": {
        "descr": "A symbolic name used to identify the placeholder. Example: \"PageHeader\"",
        "remarks": "This is not an HTML element id. This is a logical name to represent a placeholder container. Third party code must NOT make assumptions about the DOM structure of a page.",
        "dataType": "string",
        "isOptional": false,
        "readonly": true,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      }
    },
    "functions": {},
    "methods": {
      "dispose-placeholder": {
        "isBeta": false,
        "showBetaMessage": true,
        "descr": "Diposes the attached DOM tree.",
        "remarks": "This method can be called to immediately dispose the attached DOM element. Otherwise, it will be disposed by the application when the placeholder is disposed. Calling dispose() invokes the IPlaceholderAttachOptions.onDispose() callback, removes the attached DOM element from the DOM, and assigns DOM element to undefined.",
        "accessModifier": "public",
        "signature": "public dispose(): void;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "void",
        "returnDescr": "",
        "params": [],
        "docName": "dispose()",
        "mdLink": "dispose"
      }
    },
    "constructor": {},
    "types": {},
    "variables": {},
    "modules": {},
    "objects": {}
  },
  "PlaceholderCollection": {
    "isBeta": true,
    "implementsExtendsName": "",
    "genericType": "",
    "descr": "Exposes a collection of content placeholders for use by third parties.",
    "remarks": null,
    "properties": {
      "placeholderNames": {
        "descr": "Returns the names of the currently available placeholders.",
        "remarks": null,
        "dataType": "ReadonlyArray<string>",
        "isOptional": false,
        "readonly": true,
        "accessModifier": "public",
        "isCollection": false,
        "function": null,
        "returnType": null,
        "assignValue": null
      }
    },
    "functions": {},
    "methods": {
      "tryAttach-placeholdercollection": {
        "isBeta": false,
        "showBetaMessage": true,
        "descr": "Searches for a content placeholder with the specified name. If none is found, then the function returns undefined. If one is found, we try to attach to it. If the caller tries to re-attached a placeholder, an exception will be thrown. A dispose has to happen before re-attach can happen.",
        "remarks": "The host application makes no guarantees about the availability of a given placeholder. In situations where an expected placeholder is not available, the third party extension must handle it gracefully, e.g. by not rendering anything, or by choosing an alternative placeholder.",
        "accessModifier": "public",
        "signature": "public tryAttach(name: string,\r\n    options?: IPlaceholderAttachOptions): Placeholder | undefined;",
        "isStatic": false,
        "isOptional": false,
        "genericType": null,
        "returnType": "Placeholder | undefined",
        "returnDescr": "",
        "params": [
          {
            "name": "name",
            "descr": "logical name of the placeholder. This name should not be confused with the DOM id or the attribute value of the placeholder.",
            "isOptional": false,
            "dataType": "string"
          },
          {
            "name": "options",
            "descr": "placeholder options.",
            "isOptional": true,
            "dataType": "IPlaceholderAttachOptions"
          }
        ],
        "docName": "tryAttach(name,options)",
        "mdLink": "tryattachnameoptions"
      }
    },
    "constructor": {},
    "types": {},
    "variables": {},
    "modules": {},
    "objects": {}
  }
}